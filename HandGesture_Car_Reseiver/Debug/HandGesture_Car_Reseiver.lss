
HandGesture_Car_Reseiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000026a0  00002734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800168  00800168  0000283c  2**0
                  ALLOC
  3 .stab         00001f38  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f56  00000000  00000000  00004774  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000056ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000586a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00007e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000091dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a3b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000a86b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_13>
      38:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_14>
      3c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 ea       	ldi	r30, 0xA0	; 160
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 93 12 	call	0x2526	; 0x2526 <main>
      8a:	0c 94 4e 13 	jmp	0x269c	; 0x269c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 27 13 	jmp	0x264e	; 0x264e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <UART_INIT>:
#include "UART_CONFIG.h"
#include "UART_INTERFACE.h"
#include "UART_PRIVATE.h"
 void(* global_UART_Callback[3])(void)={NULL,NULL,NULL};
void UART_INIT(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
//enable and disable interrupt sources
	//1-enable and disable RX Complete
	//2-enable and disable TX Complete
	//3- enable and disable USART Data Register Empty Interrupt
	CLR_BIT(UCSRB,UDRIE);
     e00:	aa e2       	ldi	r26, 0x2A	; 42
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	ea e2       	ldi	r30, 0x2A	; 42
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 7d       	andi	r24, 0xDF	; 223
     e0c:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,TXCIE );
     e0e:	aa e2       	ldi	r26, 0x2A	; 42
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e2       	ldi	r30, 0x2A	; 42
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7b       	andi	r24, 0xBF	; 191
     e1a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,RXCIE);
     e1c:	aa e2       	ldi	r26, 0x2A	; 42
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	ea e2       	ldi	r30, 0x2A	; 42
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 77       	andi	r24, 0x7F	; 127
     e28:	8c 93       	st	X, r24
// set character size-> 5,6,7,8
	CLR_BIT(UCSRB,UCSZ2);
     e2a:	aa e2       	ldi	r26, 0x2A	; 42
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ea e2       	ldi	r30, 0x2A	; 42
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	8c 93       	st	X, r24
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//THREE SET BIT IN ONE LINE
     e38:	e0 e4       	ldi	r30, 0x40	; 64
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	86 e8       	ldi	r24, 0x86	; 134
     e3e:	80 83       	st	Z, r24
//select UART mode->sync. or async[UMSEL bit].
#if UART_mode_select==asynchronous
	CLR_BIT(UCSRC,UMSEL);
     e40:	a0 e4       	ldi	r26, 0x40	; 64
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e0 e4       	ldi	r30, 0x40	; 64
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8f 7b       	andi	r24, 0xBF	; 191
     e4c:	8c 93       	st	X, r24
#elif UART_mode_select==synchronous
	SET_BIT(UCSRC,UMSEL);
#endif
//set parity mode ->disable,even,odd
UCSRC|=(parity_select<<UPM0);
     e4e:	a0 e4       	ldi	r26, 0x40	; 64
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e0 e4       	ldi	r30, 0x40	; 64
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8c 93       	st	X, r24

// set clock polarity with sync.only

//set baud rate
//(Fosc/(16*baud_rate))-1
UBRRL=51;
     e5a:	e9 e2       	ldi	r30, 0x29	; 41
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	83 e3       	ldi	r24, 0x33	; 51
     e60:	80 83       	st	Z, r24
//enable and disable RX,TX
SET_BIT(UCSRB,TXEN);
     e62:	aa e2       	ldi	r26, 0x2A	; 42
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ea e2       	ldi	r30, 0x2A	; 42
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 60       	ori	r24, 0x08	; 8
     e6e:	8c 93       	st	X, r24
SET_BIT(UCSRB,RXEN);
     e70:	aa e2       	ldi	r26, 0x2A	; 42
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ea e2       	ldi	r30, 0x2A	; 42
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 61       	ori	r24, 0x10	; 16
     e7c:	8c 93       	st	X, r24
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <UART_Send>:
void UART_Send(u8 data)//polling function
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
     e90:	eb e2       	ldi	r30, 0x2B	; 43
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	80 72       	andi	r24, 0x20	; 32
     e9c:	90 70       	andi	r25, 0x00	; 0
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	b9 f3       	breq	.-18     	; 0xe90 <UART_Send+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
     ea2:	ec e2       	ldi	r30, 0x2C	; 44
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	80 83       	st	Z, r24

}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <UART_Recieve>:
u8 UART_Recieve(void)//polling function
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
     eba:	eb e2       	ldi	r30, 0x2B	; 43
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 23       	and	r24, r24
     ec2:	dc f7       	brge	.-10     	; 0xeba <UART_Recieve+0x8>
	/* Get and return received data from buffer */
	return UDR;
     ec4:	ec e2       	ldi	r30, 0x2C	; 44
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
}
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <UART_PrintString>:
void UART_PrintString(char str[])
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <UART_PrintString+0x6>
     ed6:	0f 92       	push	r0
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9b 83       	std	Y+3, r25	; 0x03
     ede:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;str[i]!='\0';i++)
     ee0:	19 82       	std	Y+1, r1	; 0x01
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <UART_PrintString+0x30>
	{
		UART_Send(str[i]);
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	80 81       	ld	r24, Z
     ef6:	0e 94 42 07 	call	0xe84	; 0xe84 <UART_Send>
	/* Get and return received data from buffer */
	return UDR;
}
void UART_PrintString(char str[])
{
	for(u8 i=0;str[i]!='\0';i++)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	80 81       	ld	r24, Z
     f12:	88 23       	and	r24, r24
     f14:	39 f7       	brne	.-50     	; 0xee4 <UART_PrintString+0x14>
	{
		UART_Send(str[i]);
	}
}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <UART_RecieveString>:
void UART_RecieveString(char str[],u8 size)//polling function
{
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <UART_RecieveString+0xa>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <UART_RecieveString+0xc>
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 83       	std	Y+3, r24	; 0x03
     f38:	6d 83       	std	Y+5, r22	; 0x05
	u8 flag=0;
     f3a:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i=0;i<size;i++)
     f3c:	19 82       	std	Y+1, r1	; 0x01
     f3e:	26 c0       	rjmp	.+76     	; 0xf8c <UART_RecieveString+0x6a>
	{
		str[i]=UART_Recieve();
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	8c 01       	movw	r16, r24
     f4c:	02 0f       	add	r16, r18
     f4e:	13 1f       	adc	r17, r19
     f50:	0e 94 59 07 	call	0xeb2	; 0xeb2 <UART_Recieve>
     f54:	f8 01       	movw	r30, r16
     f56:	80 83       	st	Z, r24
		if(str[i]=='\n')//to be able to recieve string less than size od strinn size
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	fc 01       	movw	r30, r24
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	80 81       	ld	r24, Z
     f6a:	8a 30       	cpi	r24, 0x0A	; 10
     f6c:	61 f4       	brne	.+24     	; 0xf86 <UART_RecieveString+0x64>
		{
			flag=1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8a 83       	std	Y+2, r24	; 0x02
			str[i]='\0';//to close the string
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	fc 01       	movw	r30, r24
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	10 82       	st	Z, r1
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <UART_RecieveString+0x72>
	}
}
void UART_RecieveString(char str[],u8 size)//polling function
{
	u8 flag=0;
	for(u8 i=0;i<size;i++)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	99 81       	ldd	r25, Y+1	; 0x01
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	98 17       	cp	r25, r24
     f92:	b0 f2       	brcs	.-84     	; 0xf40 <UART_RecieveString+0x1e>
			flag=1;
			str[i]='\0';//to close the string
			break;
		}
	}
	if(flag==0)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	88 23       	and	r24, r24
     f98:	61 f4       	brne	.+24     	; 0xfb2 <UART_RecieveString+0x90>
	{
		str[size-1]='\0';
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9c 01       	movw	r18, r24
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	30 40       	sbci	r19, 0x00	; 0
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	fc 01       	movw	r30, r24
     fac:	e2 0f       	add	r30, r18
     fae:	f3 1f       	adc	r31, r19
     fb0:	10 82       	st	Z, r1
	}

}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <UART_EnableInterrupt>:
void UART_EnableInterrupt(u8 IntId)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	0f 92       	push	r0
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	89 83       	std	Y+1, r24	; 0x01

}
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <UART_DisableInterrupt>:
void UART_DisableInterrupt(u8 IntId)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	89 83       	std	Y+1, r24	; 0x01

}
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <UART_SetBaudRate>:
void UART_SetBaudRate(u16 baud_rate)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <UART_SetBaudRate+0x6>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=51;
     ffc:	e9 e2       	ldi	r30, 0x29	; 41
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	83 e3       	ldi	r24, 0x33	; 51
    1002:	80 83       	st	Z, r24
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <UART_SetCallBack>:
void UART_SetCallBack(u8 IntId,void(*fptr)(void))
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <UART_SetCallBack+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <UART_SetCallBack+0x8>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	7b 83       	std	Y+3, r23	; 0x03
    1020:	6a 83       	std	Y+2, r22	; 0x02
	switch(IntId)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3d 83       	std	Y+5, r19	; 0x05
    102a:	2c 83       	std	Y+4, r18	; 0x04
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	81 f0       	breq	.+32     	; 0x1056 <UART_SetCallBack+0x48>
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	91 f0       	breq	.+36     	; 0x1064 <UART_SetCallBack+0x56>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	a1 f4       	brne	.+40     	; 0x1070 <UART_SetCallBack+0x62>
	{
	case 0:
		global_UART_Callback[0]=fptr;
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	90 93 69 01 	sts	0x0169, r25
    1050:	80 93 68 01 	sts	0x0168, r24
    1054:	0d c0       	rjmp	.+26     	; 0x1070 <UART_SetCallBack+0x62>
		break;
	case 1:
		global_UART_Callback[1]=fptr;
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	90 93 6b 01 	sts	0x016B, r25
    105e:	80 93 6a 01 	sts	0x016A, r24
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <UART_SetCallBack+0x62>
		break;
	case 2:
		global_UART_Callback[2]=fptr;
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	90 93 6d 01 	sts	0x016D, r25
    106c:	80 93 6c 01 	sts	0x016C, r24
		break;

	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <__vector_13>:
void __vector_13(void) __attribute__ ((signal));//recevie complete
void __vector_13(void)
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	if(global_UART_Callback[0]!=NULL)
    10aa:	80 91 68 01 	lds	r24, 0x0168
    10ae:	90 91 69 01 	lds	r25, 0x0169
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <__vector_13+0x40>
	{
		global_UART_Callback[0]();
    10b6:	e0 91 68 01 	lds	r30, 0x0168
    10ba:	f0 91 69 01 	lds	r31, 0x0169
    10be:	09 95       	icall
	}

}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_14>:
void __vector_14(void) __attribute__ ((signal));//data reg.empty
void __vector_14(void)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	if(global_UART_Callback[1]!=NULL)
    1110:	80 91 6a 01 	lds	r24, 0x016A
    1114:	90 91 6b 01 	lds	r25, 0x016B
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	29 f0       	breq	.+10     	; 0x1126 <__vector_14+0x40>
		{
			global_UART_Callback[1]();
    111c:	e0 91 6a 01 	lds	r30, 0x016A
    1120:	f0 91 6b 01 	lds	r31, 0x016B
    1124:	09 95       	icall
		}

}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_15>:
void __vector_15(void) __attribute__ ((signal));//transmit complete
void __vector_15(void)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	if(global_UART_Callback[2]!=NULL)
    1176:	80 91 6c 01 	lds	r24, 0x016C
    117a:	90 91 6d 01 	lds	r25, 0x016D
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	29 f0       	breq	.+10     	; 0x118c <__vector_15+0x40>
		{
			global_UART_Callback[2]();
    1182:	e0 91 6c 01 	lds	r30, 0x016C
    1186:	f0 91 6d 01 	lds	r31, 0x016D
    118a:	09 95       	icall
		}
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <UART_GetUDR>:
u8 UART_GetUDR(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    11ba:	ec e2       	ldi	r30, 0x2C	; 44
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <UART_Init>:



//============================================================================================
extern void UART_Init (void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62

	/*  Store the low byte of the UBBR*/
	UBRRL =  (u8) MyUBRR;
    11ce:	e9 e2       	ldi	r30, 0x29	; 41
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	87 e6       	ldi	r24, 0x67	; 103
    11d4:	80 83       	st	Z, r24

	/*  Store the High byte of the UBBR*/
	UBRRH = (u8)((MyUBRR)>>8);
    11d6:	e0 e4       	ldi	r30, 0x40	; 64
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	10 82       	st	Z, r1

	/* Configuration of UCSRnA Register  */
	UCSRnA= ( (U2X<<1) | (MPCM<<0) );
    11dc:	eb e2       	ldi	r30, 0x2B	; 43
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	10 82       	st	Z, r1

	/* Enable Transmit bit(3) and Receive bit(4) in UCSRnC Register */
	UCSRnB = ( (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) );
    11e2:	ea e2       	ldi	r30, 0x2A	; 42
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	88 e1       	ldi	r24, 0x18	; 24
    11e8:	80 83       	st	Z, r24

	/* Configure UCRnC Register to make 8-bit data & 1 stop bit & no parity  Asynchronous Mode*/
	UCSRnC = ((URSEL << 7) | (UMSEL << 6) | (UPM1 << 5) | (UPM0 << 4)
    11ea:	e0 e4       	ldi	r30, 0x40	; 64
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	86 e8       	ldi	r24, 0x86	; 134
    11f0:	80 83       	st	Z, r24
			| (USBS << 3) | (UCSZ1 << 2) | (UCSZ0 << 1));

	//set_bit(SREG,7);
}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <UART_TransmitData>:

//==================================================================================================
extern void UART_TransmitData (u8 UART_DataToBeSent)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_DataToBeSent;
    1204:	ec e2       	ldi	r30, 0x2C	; 44
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
    120c:	eb e2       	ldi	r30, 0x2B	; 43
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	82 95       	swap	r24
    1214:	86 95       	lsr	r24
    1216:	87 70       	andi	r24, 0x07	; 7
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	90 70       	andi	r25, 0x00	; 0
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	a1 f3       	breq	.-24     	; 0x120c <UART_TransmitData+0x14>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
    1224:	ab e2       	ldi	r26, 0x2B	; 43
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e2       	ldi	r30, 0x2B	; 43
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 64       	ori	r24, 0x40	; 64
    1230:	8c 93       	st	X, r24
}
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <UART_RecieveData>:
///////////////////////////////////////////////////////////////////////////////////////////////////
extern u8 UART_RecieveData(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	//while ( ! (UCSRnA & (1<<7)) );
	while(GET_BIT(UCSRnA,7)==0);
    1242:	eb e2       	ldi	r30, 0x2B	; 43
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	88 23       	and	r24, r24
    124a:	dc f7       	brge	.-10     	; 0x1242 <UART_RecieveData+0x8>
	return UDR;
    124c:	ec e2       	ldi	r30, 0x2C	; 44
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z

}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <UART_voidPrintf>:
//====================================================================================================
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <UART_voidPrintf+0x6>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9b 83       	std	Y+3, r25	; 0x03
    1266:	8a 83       	std	Y+2, r24	; 0x02

	u8 iterator=0;
    1268:	19 82       	std	Y+1, r1	; 0x01

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	0e c0       	rjmp	.+28     	; 0x128a <UART_voidPrintf+0x32>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	9b 81       	ldd	r25, Y+3	; 0x03
    1278:	fc 01       	movw	r30, r24
    127a:	e2 0f       	add	r30, r18
    127c:	f3 1f       	adc	r31, r19
    127e:	80 81       	ld	r24, Z
    1280:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <UART_TransmitData>
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{

	u8 iterator=0;

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	fc 01       	movw	r30, r24
    1296:	e2 0f       	add	r30, r18
    1298:	f3 1f       	adc	r31, r19
    129a:	80 81       	ld	r24, Z
    129c:	88 23       	and	r24, r24
    129e:	39 f7       	brne	.-50     	; 0x126e <UART_voidPrintf+0x16>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);

	}

}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <MDIO_voidSetPinDirection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void MDIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	2d 97       	sbiw	r28, 0x0d	; 13
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	6a 83       	std	Y+2, r22	; 0x02
    12c4:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <MDIO_voidSetPinDirection+0x22>
    12cc:	04 c1       	rjmp	.+520    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	88 30       	cpi	r24, 0x08	; 8
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <MDIO_voidSetPinDirection+0x2a>
    12d4:	00 c1       	rjmp	.+512    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3d 87       	std	Y+13, r19	; 0x0d
    12de:	2c 87       	std	Y+12, r18	; 0x0c
    12e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <MDIO_voidSetPinDirection+0x40>
    12ea:	4f c0       	rjmp	.+158    	; 0x138a <MDIO_voidSetPinDirection+0xde>
    12ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <MDIO_voidSetPinDirection+0x54>
    12f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	71 f0       	breq	.+28     	; 0x131a <MDIO_voidSetPinDirection+0x6e>
    12fe:	eb c0       	rjmp	.+470    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
    1300:	2c 85       	ldd	r18, Y+12	; 0x0c
    1302:	3d 85       	ldd	r19, Y+13	; 0x0d
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <MDIO_voidSetPinDirection+0x60>
    130a:	77 c0       	rjmp	.+238    	; 0x13fa <MDIO_voidSetPinDirection+0x14e>
    130c:	8c 85       	ldd	r24, Y+12	; 0x0c
    130e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <MDIO_voidSetPinDirection+0x6c>
    1316:	a9 c0       	rjmp	.+338    	; 0x146a <MDIO_voidSetPinDirection+0x1be>
    1318:	de c0       	rjmp	.+444    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8PinDirection) //Check on Direction
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3b 87       	std	Y+11, r19	; 0x0b
    1322:	2a 87       	std	Y+10, r18	; 0x0a
    1324:	8a 85       	ldd	r24, Y+10	; 0x0a
    1326:	9b 85       	ldd	r25, Y+11	; 0x0b
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	d1 f0       	breq	.+52     	; 0x1360 <MDIO_voidSetPinDirection+0xb4>
    132c:	2a 85       	ldd	r18, Y+10	; 0x0a
    132e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1330:	21 30       	cpi	r18, 0x01	; 1
    1332:	31 05       	cpc	r19, r1
    1334:	09 f0       	breq	.+2      	; 0x1338 <MDIO_voidSetPinDirection+0x8c>
    1336:	cf c0       	rjmp	.+414    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Output
    1338:	aa e3       	ldi	r26, 0x3A	; 58
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ea e3       	ldi	r30, 0x3A	; 58
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <MDIO_voidSetPinDirection+0xaa>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <MDIO_voidSetPinDirection+0xa6>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	bb c0       	rjmp	.+374    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Input
    1360:	aa e3       	ldi	r26, 0x3A	; 58
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <MDIO_voidSetPinDirection+0xd2>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <MDIO_voidSetPinDirection+0xce>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	a6 c0       	rjmp	.+332    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8PinDirection) //Check on Direction
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	39 87       	std	Y+9, r19	; 0x09
    1392:	28 87       	std	Y+8, r18	; 0x08
    1394:	88 85       	ldd	r24, Y+8	; 0x08
    1396:	99 85       	ldd	r25, Y+9	; 0x09
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	d1 f0       	breq	.+52     	; 0x13d0 <MDIO_voidSetPinDirection+0x124>
    139c:	28 85       	ldd	r18, Y+8	; 0x08
    139e:	39 85       	ldd	r19, Y+9	; 0x09
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <MDIO_voidSetPinDirection+0xfc>
    13a6:	97 c0       	rjmp	.+302    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Output
    13a8:	a7 e3       	ldi	r26, 0x37	; 55
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e7 e3       	ldi	r30, 0x37	; 55
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <MDIO_voidSetPinDirection+0x11a>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <MDIO_voidSetPinDirection+0x116>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	83 c0       	rjmp	.+262    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Input
    13d0:	a7 e3       	ldi	r26, 0x37	; 55
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e7 e3       	ldi	r30, 0x37	; 55
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <MDIO_voidSetPinDirection+0x142>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <MDIO_voidSetPinDirection+0x13e>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	6e c0       	rjmp	.+220    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8PinDirection) //Check on Direction
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3f 83       	std	Y+7, r19	; 0x07
    1402:	2e 83       	std	Y+6, r18	; 0x06
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	9f 81       	ldd	r25, Y+7	; 0x07
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	d1 f0       	breq	.+52     	; 0x1440 <MDIO_voidSetPinDirection+0x194>
    140c:	2e 81       	ldd	r18, Y+6	; 0x06
    140e:	3f 81       	ldd	r19, Y+7	; 0x07
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	09 f0       	breq	.+2      	; 0x1418 <MDIO_voidSetPinDirection+0x16c>
    1416:	5f c0       	rjmp	.+190    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Output
    1418:	a4 e3       	ldi	r26, 0x34	; 52
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e4 e3       	ldi	r30, 0x34	; 52
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_voidSetPinDirection+0x18a>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_voidSetPinDirection+0x186>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	4b c0       	rjmp	.+150    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Input
    1440:	a4 e3       	ldi	r26, 0x34	; 52
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e4 e3       	ldi	r30, 0x34	; 52
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <MDIO_voidSetPinDirection+0x1b2>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <MDIO_voidSetPinDirection+0x1ae>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	36 c0       	rjmp	.+108    	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8PinDirection) //Check on Direction
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	c9 f0       	breq	.+50     	; 0x14ae <MDIO_voidSetPinDirection+0x202>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	41 f5       	brne	.+80     	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Output
    1486:	a1 e3       	ldi	r26, 0x31	; 49
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <MDIO_voidSetPinDirection+0x1f8>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <MDIO_voidSetPinDirection+0x1f4>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Input
    14ae:	a1 e3       	ldi	r26, 0x31	; 49
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e1 e3       	ldi	r30, 0x31	; 49
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <MDIO_voidSetPinDirection+0x220>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <MDIO_voidSetPinDirection+0x21c>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
    14d6:	2d 96       	adiw	r28, 0x0d	; 13
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <MDIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void MDIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Value)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	2d 97       	sbiw	r28, 0x0d	; 13
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	6a 83       	std	Y+2, r22	; 0x02
    1500:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	08 f0       	brcs	.+2      	; 0x150a <MDIO_voidSetPinValue+0x22>
    1508:	04 c1       	rjmp	.+520    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	88 30       	cpi	r24, 0x08	; 8
    150e:	08 f0       	brcs	.+2      	; 0x1512 <MDIO_voidSetPinValue+0x2a>
    1510:	00 c1       	rjmp	.+512    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3d 87       	std	Y+13, r19	; 0x0d
    151a:	2c 87       	std	Y+12, r18	; 0x0c
    151c:	8c 85       	ldd	r24, Y+12	; 0x0c
    151e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <MDIO_voidSetPinValue+0x40>
    1526:	4f c0       	rjmp	.+158    	; 0x15c6 <MDIO_voidSetPinValue+0xde>
    1528:	2c 85       	ldd	r18, Y+12	; 0x0c
    152a:	3d 85       	ldd	r19, Y+13	; 0x0d
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <MDIO_voidSetPinValue+0x54>
    1532:	8c 85       	ldd	r24, Y+12	; 0x0c
    1534:	9d 85       	ldd	r25, Y+13	; 0x0d
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	71 f0       	breq	.+28     	; 0x1556 <MDIO_voidSetPinValue+0x6e>
    153a:	eb c0       	rjmp	.+470    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
    153c:	2c 85       	ldd	r18, Y+12	; 0x0c
    153e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <MDIO_voidSetPinValue+0x60>
    1546:	77 c0       	rjmp	.+238    	; 0x1636 <MDIO_voidSetPinValue+0x14e>
    1548:	8c 85       	ldd	r24, Y+12	; 0x0c
    154a:	9d 85       	ldd	r25, Y+13	; 0x0d
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <MDIO_voidSetPinValue+0x6c>
    1552:	a9 c0       	rjmp	.+338    	; 0x16a6 <MDIO_voidSetPinValue+0x1be>
    1554:	de c0       	rjmp	.+444    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8Value) //Check on Value
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3b 87       	std	Y+11, r19	; 0x0b
    155e:	2a 87       	std	Y+10, r18	; 0x0a
    1560:	8a 85       	ldd	r24, Y+10	; 0x0a
    1562:	9b 85       	ldd	r25, Y+11	; 0x0b
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	d1 f0       	breq	.+52     	; 0x159c <MDIO_voidSetPinValue+0xb4>
    1568:	2a 85       	ldd	r18, Y+10	; 0x0a
    156a:	3b 85       	ldd	r19, Y+11	; 0x0b
    156c:	21 30       	cpi	r18, 0x01	; 1
    156e:	31 05       	cpc	r19, r1
    1570:	09 f0       	breq	.+2      	; 0x1574 <MDIO_voidSetPinValue+0x8c>
    1572:	cf c0       	rjmp	.+414    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as High
    1574:	ab e3       	ldi	r26, 0x3B	; 59
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	eb e3       	ldi	r30, 0x3B	; 59
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <MDIO_voidSetPinValue+0xaa>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <MDIO_voidSetPinValue+0xa6>
    1596:	84 2b       	or	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	bb c0       	rjmp	.+374    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as Low
    159c:	ab e3       	ldi	r26, 0x3B	; 59
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	eb e3       	ldi	r30, 0x3B	; 59
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <MDIO_voidSetPinValue+0xd2>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <MDIO_voidSetPinValue+0xce>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	a6 c0       	rjmp	.+332    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8Value) //Check on Value
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	39 87       	std	Y+9, r19	; 0x09
    15ce:	28 87       	std	Y+8, r18	; 0x08
    15d0:	88 85       	ldd	r24, Y+8	; 0x08
    15d2:	99 85       	ldd	r25, Y+9	; 0x09
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	d1 f0       	breq	.+52     	; 0x160c <MDIO_voidSetPinValue+0x124>
    15d8:	28 85       	ldd	r18, Y+8	; 0x08
    15da:	39 85       	ldd	r19, Y+9	; 0x09
    15dc:	21 30       	cpi	r18, 0x01	; 1
    15de:	31 05       	cpc	r19, r1
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <MDIO_voidSetPinValue+0xfc>
    15e2:	97 c0       	rjmp	.+302    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as High
    15e4:	a8 e3       	ldi	r26, 0x38	; 56
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <MDIO_voidSetPinValue+0x11a>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <MDIO_voidSetPinValue+0x116>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	83 c0       	rjmp	.+262    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as Low
    160c:	a8 e3       	ldi	r26, 0x38	; 56
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e3       	ldi	r30, 0x38	; 56
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <MDIO_voidSetPinValue+0x142>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <MDIO_voidSetPinValue+0x13e>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	6e c0       	rjmp	.+220    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8Value) //Check on Value
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3f 83       	std	Y+7, r19	; 0x07
    163e:	2e 83       	std	Y+6, r18	; 0x06
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	9f 81       	ldd	r25, Y+7	; 0x07
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	d1 f0       	breq	.+52     	; 0x167c <MDIO_voidSetPinValue+0x194>
    1648:	2e 81       	ldd	r18, Y+6	; 0x06
    164a:	3f 81       	ldd	r19, Y+7	; 0x07
    164c:	21 30       	cpi	r18, 0x01	; 1
    164e:	31 05       	cpc	r19, r1
    1650:	09 f0       	breq	.+2      	; 0x1654 <MDIO_voidSetPinValue+0x16c>
    1652:	5f c0       	rjmp	.+190    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as High
    1654:	a5 e3       	ldi	r26, 0x35	; 53
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <MDIO_voidSetPinValue+0x18a>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <MDIO_voidSetPinValue+0x186>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	4b c0       	rjmp	.+150    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as Low
    167c:	a5 e3       	ldi	r26, 0x35	; 53
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e3       	ldi	r30, 0x35	; 53
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <MDIO_voidSetPinValue+0x1b2>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <MDIO_voidSetPinValue+0x1ae>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	36 c0       	rjmp	.+108    	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8Value) //Check on Value
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3d 83       	std	Y+5, r19	; 0x05
    16ae:	2c 83       	std	Y+4, r18	; 0x04
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	c9 f0       	breq	.+50     	; 0x16ea <MDIO_voidSetPinValue+0x202>
    16b8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ba:	3d 81       	ldd	r19, Y+5	; 0x05
    16bc:	21 30       	cpi	r18, 0x01	; 1
    16be:	31 05       	cpc	r19, r1
    16c0:	41 f5       	brne	.+80     	; 0x1712 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as High
    16c2:	a2 e3       	ldi	r26, 0x32	; 50
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e2 e3       	ldi	r30, 0x32	; 50
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <MDIO_voidSetPinValue+0x1f8>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <MDIO_voidSetPinValue+0x1f4>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as Low
    16ea:	a2 e3       	ldi	r26, 0x32	; 50
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e2 e3       	ldi	r30, 0x32	; 50
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <MDIO_voidSetPinValue+0x220>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <MDIO_voidSetPinValue+0x21c>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
    1712:	2d 96       	adiw	r28, 0x0d	; 13
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <MDIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8   MDIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <MDIO_u8GetPinValue+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <MDIO_u8GetPinValue+0x8>
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value=2; //set initial value for needed pin value
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	89 83       	std	Y+1, r24	; 0x01

	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	84 30       	cpi	r24, 0x04	; 4
    173e:	08 f0       	brcs	.+2      	; 0x1742 <MDIO_u8GetPinValue+0x1e>
    1740:	6b c0       	rjmp	.+214    	; 0x1818 <MDIO_u8GetPinValue+0xf4>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 30       	cpi	r24, 0x08	; 8
    1746:	08 f0       	brcs	.+2      	; 0x174a <MDIO_u8GetPinValue+0x26>
    1748:	67 c0       	rjmp	.+206    	; 0x1818 <MDIO_u8GetPinValue+0xf4>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	3d 83       	std	Y+5, r19	; 0x05
    1752:	2c 83       	std	Y+4, r18	; 0x04
    1754:	4c 81       	ldd	r20, Y+4	; 0x04
    1756:	5d 81       	ldd	r21, Y+5	; 0x05
    1758:	41 30       	cpi	r20, 0x01	; 1
    175a:	51 05       	cpc	r21, r1
    175c:	41 f1       	breq	.+80     	; 0x17ae <MDIO_u8GetPinValue+0x8a>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	34 f4       	brge	.+12     	; 0x1774 <MDIO_u8GetPinValue+0x50>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	21 15       	cp	r18, r1
    176e:	31 05       	cpc	r19, r1
    1770:	61 f0       	breq	.+24     	; 0x178a <MDIO_u8GetPinValue+0x66>
    1772:	52 c0       	rjmp	.+164    	; 0x1818 <MDIO_u8GetPinValue+0xf4>
    1774:	4c 81       	ldd	r20, Y+4	; 0x04
    1776:	5d 81       	ldd	r21, Y+5	; 0x05
    1778:	42 30       	cpi	r20, 0x02	; 2
    177a:	51 05       	cpc	r21, r1
    177c:	51 f1       	breq	.+84     	; 0x17d2 <MDIO_u8GetPinValue+0xae>
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	91 05       	cpc	r25, r1
    1786:	b9 f1       	breq	.+110    	; 0x17f6 <MDIO_u8GetPinValue+0xd2>
    1788:	47 c0       	rjmp	.+142    	; 0x1818 <MDIO_u8GetPinValue+0xf4>
		{
		case DIO_u8_PORTA:
							local_u8Value = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);  // Read the pin value
    178a:	e9 e3       	ldi	r30, 0x39	; 57
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <MDIO_u8GetPinValue+0x7e>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <MDIO_u8GetPinValue+0x7a>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	35 c0       	rjmp	.+106    	; 0x1818 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTB:
							local_u8Value = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId); // Read the pin value
    17ae:	e6 e3       	ldi	r30, 0x36	; 54
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <MDIO_u8GetPinValue+0xa2>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <MDIO_u8GetPinValue+0x9e>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	23 c0       	rjmp	.+70     	; 0x1818 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTC:
							local_u8Value = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId); // Read the pin value
    17d2:	e3 e3       	ldi	r30, 0x33	; 51
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a9 01       	movw	r20, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <MDIO_u8GetPinValue+0xc6>
    17e6:	55 95       	asr	r21
    17e8:	47 95       	ror	r20
    17ea:	8a 95       	dec	r24
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <MDIO_u8GetPinValue+0xc2>
    17ee:	ca 01       	movw	r24, r20
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	11 c0       	rjmp	.+34     	; 0x1818 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTD:
							local_u8Value = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId); // Read the pin value
    17f6:	e0 e3       	ldi	r30, 0x30	; 48
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <MDIO_u8GetPinValue+0xea>
    180a:	55 95       	asr	r21
    180c:	47 95       	ror	r20
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <MDIO_u8GetPinValue+0xe6>
    1812:	ca 01       	movw	r24, r20
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else

	return local_u8Value;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <MDIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void MDIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <MDIO_voidSetPortDirection+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <MDIO_voidSetPortDirection+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	90 f5       	brcc	.+100    	; 0x18a4 <MDIO_voidSetPortDirection+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3c 83       	std	Y+4, r19	; 0x04
    1848:	2b 83       	std	Y+3, r18	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	d1 f0       	breq	.+52     	; 0x1888 <MDIO_voidSetPortDirection+0x5e>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	2c f4       	brge	.+10     	; 0x1868 <MDIO_voidSetPortDirection+0x3e>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f0       	breq	.+24     	; 0x187e <MDIO_voidSetPortDirection+0x54>
    1866:	1e c0       	rjmp	.+60     	; 0x18a4 <MDIO_voidSetPortDirection+0x7a>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <MDIO_voidSetPortDirection+0x68>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	81 f0       	breq	.+32     	; 0x189c <MDIO_voidSetPortDirection+0x72>
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_DDRA_REG=copy_u8PortDirection;  // Set the port Direction
    187e:	ea e3       	ldi	r30, 0x3A	; 58
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_DDRB_REG=copy_u8PortDirection;  // Set the port Direction
    1888:	e7 e3       	ldi	r30, 0x37	; 55
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_DDRC_REG=copy_u8PortDirection;  // Set the port Direction
    1892:	e4 e3       	ldi	r30, 0x34	; 52
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 83       	st	Z, r24
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_DDRD_REG=copy_u8PortDirection;  // Set the port Direction
    189c:	e1 e3       	ldi	r30, 0x31	; 49
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <MDIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void MDIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <MDIO_voidSetPortValue+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <MDIO_voidSetPortValue+0x8>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	90 f5       	brcc	.+100    	; 0x192c <MDIO_voidSetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3c 83       	std	Y+4, r19	; 0x04
    18d0:	2b 83       	std	Y+3, r18	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	d1 f0       	breq	.+52     	; 0x1910 <MDIO_voidSetPortValue+0x5e>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <MDIO_voidSetPortValue+0x3e>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	61 f0       	breq	.+24     	; 0x1906 <MDIO_voidSetPortValue+0x54>
    18ee:	1e c0       	rjmp	.+60     	; 0x192c <MDIO_voidSetPortValue+0x7a>
    18f0:	2b 81       	ldd	r18, Y+3	; 0x03
    18f2:	3c 81       	ldd	r19, Y+4	; 0x04
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	81 f0       	breq	.+32     	; 0x191a <MDIO_voidSetPortValue+0x68>
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	81 f0       	breq	.+32     	; 0x1924 <MDIO_voidSetPortValue+0x72>
    1904:	13 c0       	rjmp	.+38     	; 0x192c <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_PORTA_REG=copy_u8PortValue;  // Set the port Value
    1906:	eb e3       	ldi	r30, 0x3B	; 59
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
    190e:	0e c0       	rjmp	.+28     	; 0x192c <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_PORTB_REG=copy_u8PortValue;  // Set the port Value
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 83       	st	Z, r24
    1918:	09 c0       	rjmp	.+18     	; 0x192c <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_PORTC_REG=copy_u8PortValue;  // Set the port Value
    191a:	e5 e3       	ldi	r30, 0x35	; 53
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	80 83       	st	Z, r24
    1922:	04 c0       	rjmp	.+8      	; 0x192c <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_PORTD_REG=copy_u8PortValue;  // Set the port Value
    1924:	e2 e3       	ldi	r30, 0x32	; 50
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <MDIO_voidGetPortValue>:
/******************************************************************************/
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/******************************************************************************/
u8 MDIO_voidGetPortValue(u8 copy_u8PortId)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <MDIO_voidGetPortValue+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <MDIO_voidGetPortValue+0x8>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8PortValue=0;
    1948:	19 82       	std	Y+1, r1	; 0x01
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	90 f5       	brcc	.+100    	; 0x19b4 <MDIO_voidGetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3c 83       	std	Y+4, r19	; 0x04
    1958:	2b 83       	std	Y+3, r18	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	d1 f0       	breq	.+52     	; 0x1998 <MDIO_voidGetPortValue+0x5e>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	2c f4       	brge	.+10     	; 0x1978 <MDIO_voidGetPortValue+0x3e>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	61 f0       	breq	.+24     	; 0x198e <MDIO_voidGetPortValue+0x54>
    1976:	1e c0       	rjmp	.+60     	; 0x19b4 <MDIO_voidGetPortValue+0x7a>
    1978:	2b 81       	ldd	r18, Y+3	; 0x03
    197a:	3c 81       	ldd	r19, Y+4	; 0x04
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	81 f0       	breq	.+32     	; 0x19a2 <MDIO_voidGetPortValue+0x68>
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	91 05       	cpc	r25, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <MDIO_voidGetPortValue+0x72>
    198c:	13 c0       	rjmp	.+38     	; 0x19b4 <MDIO_voidGetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							local_u8PortValue = DIO_u8_PINA_REG;  // Read the port Value
    198e:	e9 e3       	ldi	r30, 0x39	; 57
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	0e c0       	rjmp	.+28     	; 0x19b4 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							local_u8PortValue = DIO_u8_PINB_REG;  // Read the port Value
    1998:	e6 e3       	ldi	r30, 0x36	; 54
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							local_u8PortValue = DIO_u8_PINC_REG;  // Read the port Value
    19a2:	e3 e3       	ldi	r30, 0x33	; 51
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							local_u8PortValue = DIO_u8_PIND_REG;  // Read the port Value
    19ac:	e0 e3       	ldi	r30, 0x30	; 48
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else
	return local_u8PortValue; // return port value
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <ADC_voidInit>:

#include "ADC_Interface.h"
#include "ADC_Private.h"

void ADC_voidInit(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
    19cc:	a7 e2       	ldi	r26, 0x27	; 39
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e7 e2       	ldi	r30, 0x27	; 39
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
    19da:	a7 e2       	ldi	r26, 0x27	; 39
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e7 e2       	ldi	r30, 0x27	; 39
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 64       	ori	r24, 0x40	; 64
    19e6:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
    19e8:	a7 e2       	ldi	r26, 0x27	; 39
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e7 e2       	ldi	r30, 0x27	; 39
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7d       	andi	r24, 0xDF	; 223
    19f4:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    19f6:	a6 e2       	ldi	r26, 0x26	; 38
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e6 e2       	ldi	r30, 0x26	; 38
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 7d       	andi	r24, 0xDF	; 223
    1a02:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1a04:	a6 e2       	ldi	r26, 0x26	; 38
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e6 e2       	ldi	r30, 0x26	; 38
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	84 60       	ori	r24, 0x04	; 4
    1a10:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1a12:	a6 e2       	ldi	r26, 0x26	; 38
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e6 e2       	ldi	r30, 0x26	; 38
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	82 60       	ori	r24, 0x02	; 2
    1a1e:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1a20:	a6 e2       	ldi	r26, 0x26	; 38
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e6 e2       	ldi	r30, 0x26	; 38
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8e 7f       	andi	r24, 0xFE	; 254
    1a2c:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
    1a2e:	a6 e2       	ldi	r26, 0x26	; 38
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e6 e2       	ldi	r30, 0x26	; 38
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 68       	ori	r24, 0x80	; 128
    1a3a:	8c 93       	st	X, r24
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <ADC_u8GetDigitalValue>:

u16   ADC_u8GetDigitalValue(u8 Copy_u8ChannelNb)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <ADC_u8GetDigitalValue+0x6>
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue=0;
    1a50:	1a 82       	std	Y+2, r1	; 0x02
    1a52:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8ChannelNb < 32))
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	80 32       	cpi	r24, 0x20	; 32
    1a58:	c8 f5       	brcc	.+114    	; 0x1acc <ADC_u8GetDigitalValue+0x8a>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1a5a:	a7 e2       	ldi	r26, 0x27	; 39
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e7 e2       	ldi	r30, 0x27	; 39
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 7e       	andi	r24, 0xE0	; 224
    1a66:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    1a68:	a7 e2       	ldi	r26, 0x27	; 39
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e7 e2       	ldi	r30, 0x27	; 39
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	90 81       	ld	r25, Z
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	89 2b       	or	r24, r25
    1a76:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    1a78:	a6 e2       	ldi	r26, 0x26	; 38
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e6 e2       	ldi	r30, 0x26	; 38
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	80 64       	ori	r24, 0x40	; 64
    1a84:	8c 93       	st	X, r24
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0))
    1a86:	e6 e2       	ldi	r30, 0x26	; 38
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	82 95       	swap	r24
    1a8e:	8f 70       	andi	r24, 0x0F	; 15
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	90 70       	andi	r25, 0x00	; 0
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	a9 f3       	breq	.-22     	; 0x1a86 <ADC_u8GetDigitalValue+0x44>
		{

		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
    1a9c:	e6 e2       	ldi	r30, 0x26	; 38
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	82 95       	swap	r24
    1aa4:	8f 70       	andi	r24, 0x0F	; 15
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	81 70       	andi	r24, 0x01	; 1
    1aac:	90 70       	andi	r25, 0x00	; 0
    1aae:	88 23       	and	r24, r24
    1ab0:	69 f0       	breq	.+26     	; 0x1acc <ADC_u8GetDigitalValue+0x8a>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    1ab2:	a6 e2       	ldi	r26, 0x26	; 38
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e6 e2       	ldi	r30, 0x26	; 38
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	80 61       	ori	r24, 0x10	; 16
    1abe:	8c 93       	st	X, r24
			/* Read the Digital Value */
			local_u16DigitalValue = ADC_u16_ADC_REG;
    1ac0:	e4 e2       	ldi	r30, 0x24	; 36
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
return local_u16DigitalValue;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <Private_voidSendInstruction>:
#include "../../MCAL/DIO/DIO_Private.h"
#include "../../MCAL/DIO/DIO_Configuration.h"


void Private_voidSendInstruction(u8 copy_u8Instruction)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
	/*Instruction --> RS = 0, Writer --> RW = 0*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
	/*Instruction --> Data_Port*/
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Instruction);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b0a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <MDIO_voidSetPortValue>
	/*Enable --> Falling Edge (1 then 0)*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 e0       	ldi	r26, 0x00	; 0
    1b1e:	b0 e4       	ldi	r27, 0x40	; 64
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	ad 87       	std	Y+13, r26	; 0x0d
    1b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a e7       	ldi	r20, 0x7A	; 122
    1b36:	55 e4       	ldi	r21, 0x45	; 69
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8f 83       	std	Y+7, r24	; 0x07
    1b42:	98 87       	std	Y+8, r25	; 0x08
    1b44:	a9 87       	std	Y+9, r26	; 0x09
    1b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <Private_voidSendInstruction+0x8e>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <Private_voidSendInstruction+0x10c>
	else if (__tmp > 65535)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	4c f5       	brge	.+82     	; 0x1bd4 <Private_voidSendInstruction+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <Private_voidSendInstruction+0xee>
    1bac:	80 e9       	ldi	r24, 0x90	; 144
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <Private_voidSendInstruction+0xdc>
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	69 f7       	brne	.-38     	; 0x1bac <Private_voidSendInstruction+0xd0>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <Private_voidSendInstruction+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <Private_voidSendInstruction+0x118>
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
}
    1c06:	2f 96       	adiw	r28, 0x0f	; 15
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <HLCD_voidInit>:


/*LCD Init*/
void HLCD_voidInit()
{
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	c6 54       	subi	r28, 0x46	; 70
    1c26:	d0 40       	sbci	r29, 0x00	; 0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	fe 01       	movw	r30, r28
    1c34:	ed 5b       	subi	r30, 0xBD	; 189
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 ef       	ldi	r26, 0xF0	; 240
    1c3e:	b1 e4       	ldi	r27, 0x41	; 65
    1c40:	80 83       	st	Z, r24
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	a2 83       	std	Z+2, r26	; 0x02
    1c46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	8e 01       	movw	r16, r28
    1c4a:	01 5c       	subi	r16, 0xC1	; 193
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ed 5b       	subi	r30, 0xBD	; 189
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	55 e4       	ldi	r21, 0x45	; 69
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	80 83       	st	Z, r24
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	a2 83       	std	Z+2, r26	; 0x02
    1c74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c76:	fe 01       	movw	r30, r28
    1c78:	ff 96       	adiw	r30, 0x3f	; 63
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <HLCD_voidInit+0x84>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9e af       	std	Y+62, r25	; 0x3e
    1c98:	8d af       	std	Y+61, r24	; 0x3d
    1c9a:	46 c0       	rjmp	.+140    	; 0x1d28 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ff 96       	adiw	r30, 0x3f	; 63
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	64 f5       	brge	.+88     	; 0x1d10 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ed 5b       	subi	r30, 0xBD	; 189
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e af       	std	Y+62, r25	; 0x3e
    1ce4:	8d af       	std	Y+61, r24	; 0x3d
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <HLCD_voidInit+0xee>
    1ce8:	80 e9       	ldi	r24, 0x90	; 144
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	9c af       	std	Y+60, r25	; 0x3c
    1cee:	8b af       	std	Y+59, r24	; 0x3b
    1cf0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cf2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <HLCD_voidInit+0xdc>
    1cf8:	9c af       	std	Y+60, r25	; 0x3c
    1cfa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9e af       	std	Y+62, r25	; 0x3e
    1d04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d08:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	69 f7       	brne	.-38     	; 0x1ce8 <HLCD_voidInit+0xd0>
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d10:	fe 01       	movw	r30, r28
    1d12:	ff 96       	adiw	r30, 0x3f	; 63
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e af       	std	Y+62, r25	; 0x3e
    1d26:	8d af       	std	Y+61, r24	; 0x3d
    1d28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2c:	9a af       	std	Y+58, r25	; 0x3a
    1d2e:	89 af       	std	Y+57, r24	; 0x39
    1d30:	89 ad       	ldd	r24, Y+57	; 0x39
    1d32:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <HLCD_voidInit+0x11c>
    1d38:	9a af       	std	Y+58, r25	; 0x3a
    1d3a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	/*Fn set*/
	Private_voidSendInstruction(LCD_u8_FUNCTION_SET);
    1d3c:	8c e3       	ldi	r24, 0x3C	; 60
    1d3e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 ef       	ldi	r26, 0xF0	; 240
    1d48:	b1 e4       	ldi	r27, 0x41	; 65
    1d4a:	8d ab       	std	Y+53, r24	; 0x35
    1d4c:	9e ab       	std	Y+54, r25	; 0x36
    1d4e:	af ab       	std	Y+55, r26	; 0x37
    1d50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6d a9       	ldd	r22, Y+53	; 0x35
    1d54:	7e a9       	ldd	r23, Y+54	; 0x36
    1d56:	8f a9       	ldd	r24, Y+55	; 0x37
    1d58:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	55 e4       	ldi	r21, 0x45	; 69
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	89 ab       	std	Y+49, r24	; 0x31
    1d6c:	9a ab       	std	Y+50, r25	; 0x32
    1d6e:	ab ab       	std	Y+51, r26	; 0x33
    1d70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <HLCD_voidInit+0x17c>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	98 ab       	std	Y+48, r25	; 0x30
    1d90:	8f a7       	std	Y+47, r24	; 0x2f
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6d a9       	ldd	r22, Y+53	; 0x35
    1dae:	7e a9       	ldd	r23, Y+54	; 0x36
    1db0:	8f a9       	ldd	r24, Y+55	; 0x37
    1db2:	98 ad       	ldd	r25, Y+56	; 0x38
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	98 ab       	std	Y+48, r25	; 0x30
    1dd2:	8f a7       	std	Y+47, r24	; 0x2f
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <HLCD_voidInit+0x1dc>
    1dd6:	80 e9       	ldi	r24, 0x90	; 144
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	9e a7       	std	Y+46, r25	; 0x2e
    1ddc:	8d a7       	std	Y+45, r24	; 0x2d
    1dde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <HLCD_voidInit+0x1ca>
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dec:	98 a9       	ldd	r25, Y+48	; 0x30
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <HLCD_voidInit+0x1be>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1e00:	7a a9       	ldd	r23, Y+50	; 0x32
    1e02:	8b a9       	ldd	r24, Y+51	; 0x33
    1e04:	9c a9       	ldd	r25, Y+52	; 0x34
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e14:	98 a9       	ldd	r25, Y+48	; 0x30
    1e16:	9c a7       	std	Y+44, r25	; 0x2c
    1e18:	8b a7       	std	Y+43, r24	; 0x2b
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <HLCD_voidInit+0x206>
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	/*Display ON/OFF control*/
	Private_voidSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1e26:	8c e0       	ldi	r24, 0x0C	; 12
    1e28:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 ef       	ldi	r26, 0xF0	; 240
    1e32:	b1 e4       	ldi	r27, 0x41	; 65
    1e34:	8f a3       	std	Y+39, r24	; 0x27
    1e36:	98 a7       	std	Y+40, r25	; 0x28
    1e38:	a9 a7       	std	Y+41, r26	; 0x29
    1e3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e40:	89 a5       	ldd	r24, Y+41	; 0x29
    1e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a e7       	ldi	r20, 0x7A	; 122
    1e4a:	55 e4       	ldi	r21, 0x45	; 69
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8b a3       	std	Y+35, r24	; 0x23
    1e56:	9c a3       	std	Y+36, r25	; 0x24
    1e58:	ad a3       	std	Y+37, r26	; 0x25
    1e5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e60:	8d a1       	ldd	r24, Y+37	; 0x25
    1e62:	9e a1       	ldd	r25, Y+38	; 0x26
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <HLCD_voidInit+0x266>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9a a3       	std	Y+34, r25	; 0x22
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e80:	7c a1       	ldd	r23, Y+36	; 0x24
    1e82:	8d a1       	ldd	r24, Y+37	; 0x25
    1e84:	9e a1       	ldd	r25, Y+38	; 0x26
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6f a1       	ldd	r22, Y+39	; 0x27
    1e98:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9a a3       	std	Y+34, r25	; 0x22
    1ebc:	89 a3       	std	Y+33, r24	; 0x21
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <HLCD_voidInit+0x2c6>
    1ec0:	80 e9       	ldi	r24, 0x90	; 144
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	98 a3       	std	Y+32, r25	; 0x20
    1ec6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eca:	98 a1       	ldd	r25, Y+32	; 0x20
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <HLCD_voidInit+0x2b4>
    1ed0:	98 a3       	std	Y+32, r25	; 0x20
    1ed2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9a a3       	std	Y+34, r25	; 0x22
    1edc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <HLCD_voidInit+0x2a8>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eea:	7c a1       	ldd	r23, Y+36	; 0x24
    1eec:	8d a1       	ldd	r24, Y+37	; 0x25
    1eee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9a a3       	std	Y+34, r25	; 0x22
    1efa:	89 a3       	std	Y+33, r24	; 0x21
    1efc:	89 a1       	ldd	r24, Y+33	; 0x21
    1efe:	9a a1       	ldd	r25, Y+34	; 0x22
    1f00:	9e 8f       	std	Y+30, r25	; 0x1e
    1f02:	8d 8f       	std	Y+29, r24	; 0x1d
    1f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <HLCD_voidInit+0x2f0>
    1f0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);
	/*Clear Display*/
	Private_voidSendInstruction(LCD_u8_CLR_DISPLAY);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 ef       	ldi	r26, 0xF0	; 240
    1f1c:	b1 e4       	ldi	r27, 0x41	; 65
    1f1e:	89 8f       	std	Y+25, r24	; 0x19
    1f20:	9a 8f       	std	Y+26, r25	; 0x1a
    1f22:	ab 8f       	std	Y+27, r26	; 0x1b
    1f24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	69 8d       	ldd	r22, Y+25	; 0x19
    1f28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a e7       	ldi	r20, 0x7A	; 122
    1f34:	55 e4       	ldi	r21, 0x45	; 69
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8d 8b       	std	Y+21, r24	; 0x15
    1f40:	9e 8b       	std	Y+22, r25	; 0x16
    1f42:	af 8b       	std	Y+23, r26	; 0x17
    1f44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <HLCD_voidInit+0x350>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <HLCD_voidInit+0x3b0>
    1faa:	80 e9       	ldi	r24, 0x90	; 144
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	9a 8b       	std	Y+18, r25	; 0x12
    1fb0:	89 8b       	std	Y+17, r24	; 0x11
    1fb2:	89 89       	ldd	r24, Y+17	; 0x11
    1fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <HLCD_voidInit+0x39e>
    1fba:	9a 8b       	std	Y+18, r25	; 0x12
    1fbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <HLCD_voidInit+0x392>
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	98 8b       	std	Y+16, r25	; 0x10
    1fec:	8f 87       	std	Y+15, r24	; 0x0f
    1fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff0:	98 89       	ldd	r25, Y+16	; 0x10
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <HLCD_voidInit+0x3da>
    1ff6:	98 8b       	std	Y+16, r25	; 0x10
    1ff8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	/*Entry Mode Set*/
	Private_voidSendInstruction(LCD_u8_ENTRY_MODE);
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 ef       	ldi	r26, 0xF0	; 240
    2006:	b1 e4       	ldi	r27, 0x41	; 65
    2008:	8b 87       	std	Y+11, r24	; 0x0b
    200a:	9c 87       	std	Y+12, r25	; 0x0c
    200c:	ad 87       	std	Y+13, r26	; 0x0d
    200e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	6b 85       	ldd	r22, Y+11	; 0x0b
    2012:	7c 85       	ldd	r23, Y+12	; 0x0c
    2014:	8d 85       	ldd	r24, Y+13	; 0x0d
    2016:	9e 85       	ldd	r25, Y+14	; 0x0e
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4a e7       	ldi	r20, 0x7A	; 122
    201e:	55 e4       	ldi	r21, 0x45	; 69
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8f 83       	std	Y+7, r24	; 0x07
    202a:	98 87       	std	Y+8, r25	; 0x08
    202c:	a9 87       	std	Y+9, r26	; 0x09
    202e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	2c f4       	brge	.+10     	; 0x2052 <HLCD_voidInit+0x43a>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	3f c0       	rjmp	.+126    	; 0x20d0 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	4c f5       	brge	.+82     	; 0x20bc <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	6b 85       	ldd	r22, Y+11	; 0x0b
    206c:	7c 85       	ldd	r23, Y+12	; 0x0c
    206e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2070:	9e 85       	ldd	r25, Y+14	; 0x0e
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e2       	ldi	r20, 0x20	; 32
    2078:	51 e4       	ldi	r21, 0x41	; 65
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <HLCD_voidInit+0x49a>
    2094:	80 e9       	ldi	r24, 0x90	; 144
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	8b 83       	std	Y+3, r24	; 0x03
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <HLCD_voidInit+0x488>
    20a4:	9c 83       	std	Y+4, r25	; 0x04
    20a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	69 f7       	brne	.-38     	; 0x2094 <HLCD_voidInit+0x47c>
    20ba:	14 c0       	rjmp	.+40     	; 0x20e4 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20bc:	6f 81       	ldd	r22, Y+7	; 0x07
    20be:	78 85       	ldd	r23, Y+8	; 0x08
    20c0:	89 85       	ldd	r24, Y+9	; 0x09
    20c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	8d 81       	ldd	r24, Y+5	; 0x05
    20d2:	9e 81       	ldd	r25, Y+6	; 0x06
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <HLCD_voidInit+0x4c4>
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
}
    20e4:	ca 5b       	subi	r28, 0xBA	; 186
    20e6:	df 4f       	sbci	r29, 0xFF	; 255
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret

000020fc <HLCD_voidSendData>:

/*LCD Send Data*/
void HLCD_voidSendData(u8 copy_u8Char) /* 'A' */
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	2f 97       	sbiw	r28, 0x0f	; 15
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	8f 87       	std	Y+15, r24	; 0x0f
		/*Data --> RS = 1, Writer --> RW = 0*/
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	62 e0       	ldi	r22, 0x02	; 2
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
		/*Instruction --> Data_Port*/
		MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Char);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	6f 85       	ldd	r22, Y+15	; 0x0f
    212a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <MDIO_voidSetPortValue>
		/*Enable --> Falling Edge (1 then 0)*/
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e0       	ldi	r26, 0x00	; 0
    213e:	b0 e4       	ldi	r27, 0x40	; 64
    2140:	8b 87       	std	Y+11, r24	; 0x0b
    2142:	9c 87       	std	Y+12, r25	; 0x0c
    2144:	ad 87       	std	Y+13, r26	; 0x0d
    2146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	6b 85       	ldd	r22, Y+11	; 0x0b
    214a:	7c 85       	ldd	r23, Y+12	; 0x0c
    214c:	8d 85       	ldd	r24, Y+13	; 0x0d
    214e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	55 e4       	ldi	r21, 0x45	; 69
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8f 83       	std	Y+7, r24	; 0x07
    2162:	98 87       	std	Y+8, r25	; 0x08
    2164:	a9 87       	std	Y+9, r26	; 0x09
    2166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <HLCD_voidSendData+0x8e>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <HLCD_voidSendData+0xee>
    21cc:	80 e9       	ldi	r24, 0x90	; 144
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <HLCD_voidSendData+0xdc>
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <HLCD_voidSendData+0xd0>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <HLCD_voidSendData+0x118>
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
}
    2226:	2f 96       	adiw	r28, 0x0f	; 15
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <HLCD_voidSendString>:

void HLCD_voidSendString (char *copy_ptrString)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <HLCD_voidSendString+0x6>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	0b c0       	rjmp	.+22     	; 0x225e <HLCD_voidSendString+0x26>
	while (*copy_ptrString > 0) //Termination condition
	{
		HLCD_voidSendData(*copy_ptrString++); //Send char then move pointer to next char
    2248:	e9 81       	ldd	r30, Y+1	; 0x01
    224a:	fa 81       	ldd	r31, Y+2	; 0x02
    224c:	20 81       	ld	r18, Z
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	9a 81       	ldd	r25, Y+2	; 0x02
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	82 2f       	mov	r24, r18
    225a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <HLCD_voidSendData>
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
}

void HLCD_voidSendString (char *copy_ptrString)
{
	while (*copy_ptrString > 0) //Termination condition
    225e:	e9 81       	ldd	r30, Y+1	; 0x01
    2260:	fa 81       	ldd	r31, Y+2	; 0x02
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	81 f7       	brne	.-32     	; 0x2248 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*copy_ptrString++); //Send char then move pointer to next char
	}
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <HLCD_voidGoToPos>:

void HLCD_voidGoToPos (u8 copy_u8RowNum, u8 copy_u8ColumnNum)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <HLCD_voidGoToPos+0x6>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8RowNum >= LCD_u8_Row1) && (copy_u8RowNum <= LCD_u8_Row2) &&
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	88 23       	and	r24, r24
    2284:	c1 f0       	breq	.+48     	; 0x22b6 <HLCD_voidGoToPos+0x44>
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	a8 f4       	brcc	.+42     	; 0x22b6 <HLCD_voidGoToPos+0x44>
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	88 23       	and	r24, r24
    2290:	91 f0       	breq	.+36     	; 0x22b6 <HLCD_voidGoToPos+0x44>
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	81 31       	cpi	r24, 0x11	; 17
    2296:	78 f4       	brcc	.+30     	; 0x22b6 <HLCD_voidGoToPos+0x44>
		(copy_u8ColumnNum >= LCD_u8_Column1) && (copy_u8ColumnNum <= LCD_u8_Column16))
	{
		Private_voidSendInstruction(LCD_u8_POSITION);
    2298:	80 e8       	ldi	r24, 0x80	; 128
    229a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
		if (copy_u8RowNum==1)
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	29 f4       	brne	.+10     	; 0x22ae <HLCD_voidGoToPos+0x3c>
		{
			Private_voidSendInstruction(LCD_u8_ROW1Address + copy_u8ColumnNum);
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	81 58       	subi	r24, 0x81	; 129
    22a8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <HLCD_voidGoToPos+0x44>
		}
		else
		{
			Private_voidSendInstruction(LCD_u8_ROW2Address + copy_u8ColumnNum);
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	81 54       	subi	r24, 0x41	; 65
    22b2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
		}
	}

}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <HLCD_voidDisplayClear>:

void HLCD_voidDisplayClear (void)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
	Private_voidSendInstruction(LCD_u8_CLR_DISPLAY);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Private_voidSendInstruction>
}
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <Private_map>:

#include "../../MCAL/ADC/ADC_Interface.h"
#include "../../MCAL/ADC/ADC_Private.h"


long Private_map(long x, long in_min, long in_max, long out_min, long out_max) {
    22d4:	af 92       	push	r10
    22d6:	bf 92       	push	r11
    22d8:	cf 92       	push	r12
    22da:	df 92       	push	r13
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	60 97       	sbiw	r28, 0x10	; 16
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	69 83       	std	Y+1, r22	; 0x01
    22fa:	7a 83       	std	Y+2, r23	; 0x02
    22fc:	8b 83       	std	Y+3, r24	; 0x03
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	2d 83       	std	Y+5, r18	; 0x05
    2302:	3e 83       	std	Y+6, r19	; 0x06
    2304:	4f 83       	std	Y+7, r20	; 0x07
    2306:	58 87       	std	Y+8, r21	; 0x08
    2308:	e9 86       	std	Y+9, r14	; 0x09
    230a:	fa 86       	std	Y+10, r15	; 0x0a
    230c:	0b 87       	std	Y+11, r16	; 0x0b
    230e:	1c 87       	std	Y+12, r17	; 0x0c
    2310:	ad 86       	std	Y+13, r10	; 0x0d
    2312:	be 86       	std	Y+14, r11	; 0x0e
    2314:	cf 86       	std	Y+15, r12	; 0x0f
    2316:	d8 8a       	std	Y+16, r13	; 0x10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2318:	29 81       	ldd	r18, Y+1	; 0x01
    231a:	3a 81       	ldd	r19, Y+2	; 0x02
    231c:	4b 81       	ldd	r20, Y+3	; 0x03
    231e:	5c 81       	ldd	r21, Y+4	; 0x04
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	af 81       	ldd	r26, Y+7	; 0x07
    2326:	b8 85       	ldd	r27, Y+8	; 0x08
    2328:	79 01       	movw	r14, r18
    232a:	8a 01       	movw	r16, r20
    232c:	e8 1a       	sub	r14, r24
    232e:	f9 0a       	sbc	r15, r25
    2330:	0a 0b       	sbc	r16, r26
    2332:	1b 0b       	sbc	r17, r27
    2334:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2336:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2338:	4f 8d       	ldd	r20, Y+31	; 0x1f
    233a:	58 a1       	ldd	r21, Y+32	; 0x20
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	af 85       	ldd	r26, Y+15	; 0x0f
    2342:	b8 89       	ldd	r27, Y+16	; 0x10
    2344:	28 1b       	sub	r18, r24
    2346:	39 0b       	sbc	r19, r25
    2348:	4a 0b       	sbc	r20, r26
    234a:	5b 0b       	sbc	r21, r27
    234c:	c8 01       	movw	r24, r16
    234e:	b7 01       	movw	r22, r14
    2350:	0e 94 bb 12 	call	0x2576	; 0x2576 <__mulsi3>
    2354:	7b 01       	movw	r14, r22
    2356:	8c 01       	movw	r16, r24
    2358:	29 85       	ldd	r18, Y+9	; 0x09
    235a:	3a 85       	ldd	r19, Y+10	; 0x0a
    235c:	4b 85       	ldd	r20, Y+11	; 0x0b
    235e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	af 81       	ldd	r26, Y+7	; 0x07
    2366:	b8 85       	ldd	r27, Y+8	; 0x08
    2368:	28 1b       	sub	r18, r24
    236a:	39 0b       	sbc	r19, r25
    236c:	4a 0b       	sbc	r20, r26
    236e:	5b 0b       	sbc	r21, r27
    2370:	c8 01       	movw	r24, r16
    2372:	b7 01       	movw	r22, r14
    2374:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__divmodsi4>
    2378:	da 01       	movw	r26, r20
    237a:	c9 01       	movw	r24, r18
    237c:	9c 01       	movw	r18, r24
    237e:	ad 01       	movw	r20, r26
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	af 85       	ldd	r26, Y+15	; 0x0f
    2386:	b8 89       	ldd	r27, Y+16	; 0x10
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	a4 1f       	adc	r26, r20
    238e:	b5 1f       	adc	r27, r21
}
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	60 96       	adiw	r28, 0x10	; 16
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	08 95       	ret

000023b6 <HFLEX_voidInit>:

void HFLEX_voidInit(){
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR1_PIN,DIO_u8_INPUT);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR2_PIN,DIO_u8_INPUT);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR3_PIN,DIO_u8_INPUT);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	62 e0       	ldi	r22, 0x02	; 2
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR4_PIN,DIO_u8_INPUT);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	63 e0       	ldi	r22, 0x03	; 3
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR5_PIN,DIO_u8_INPUT);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	64 e0       	ldi	r22, 0x04	; 4
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPinDirection>
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <HFLEX_u8Getangle>:

u8 HFLEX_u8Getangle(u8 copy_FLEX_SENSOR_PIN){
    23f6:	af 92       	push	r10
    23f8:	bf 92       	push	r11
    23fa:	cf 92       	push	r12
    23fc:	df 92       	push	r13
    23fe:	ef 92       	push	r14
    2400:	ff 92       	push	r15
    2402:	0f 93       	push	r16
    2404:	1f 93       	push	r17
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <HFLEX_u8Getangle+0x16>
    240c:	00 d0       	rcall	.+0      	; 0x240e <HFLEX_u8Getangle+0x18>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <HFLEX_u8Getangle+0x1a>
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	8e 83       	std	Y+6, r24	; 0x06

u8 flexADC=ADC_u8GetDigitalValue(copy_FLEX_SENSOR_PIN);
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <ADC_u8GetDigitalValue>
    241c:	8d 83       	std	Y+5, r24	; 0x05

f32 flexR = R_DIV * (VCC /( (flexADC) * VCC / 1023.0) - 1.0);
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	aa 27       	eor	r26, r26
    2426:	97 fd       	sbrc	r25, 7
    2428:	a0 95       	com	r26
    242a:	ba 2f       	mov	r27, r26
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	29 e2       	ldi	r18, 0x29	; 41
    243e:	3c e5       	ldi	r19, 0x5C	; 92
    2440:	4f e9       	ldi	r20, 0x9F	; 159
    2442:	50 e4       	ldi	r21, 0x40	; 64
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 ec       	ldi	r19, 0xC0	; 192
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9c 01       	movw	r18, r24
    2462:	ad 01       	movw	r20, r26
    2464:	69 e2       	ldi	r22, 0x29	; 41
    2466:	7c e5       	ldi	r23, 0x5C	; 92
    2468:	8f e9       	ldi	r24, 0x9F	; 159
    246a:	90 e4       	ldi	r25, 0x40	; 64
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3c e8       	ldi	r19, 0x8C	; 140
    2490:	49 e3       	ldi	r20, 0x39	; 57
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	ab 83       	std	Y+3, r26	; 0x03
    24a2:	bc 83       	std	Y+4, r27	; 0x04

return Private_map(flexR, STRAIGHT_RESISTANCE, BEND_RESISTANCE,0, 90.0);
    24a4:	69 81       	ldd	r22, Y+1	; 0x01
    24a6:	7a 81       	ldd	r23, Y+2	; 0x02
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <HFLEX_u8Getangle+0xc0>
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <HFLEX_u8Getangle+0xc2>
    24b8:	ed b7       	in	r30, 0x3d	; 61
    24ba:	fe b7       	in	r31, 0x3e	; 62
    24bc:	31 96       	adiw	r30, 0x01	; 1
    24be:	8a e5       	ldi	r24, 0x5A	; 90
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
    24ce:	ca 01       	movw	r24, r20
    24d0:	b9 01       	movw	r22, r18
    24d2:	24 eb       	ldi	r18, 0xB4	; 180
    24d4:	31 e9       	ldi	r19, 0x91	; 145
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	0f 2e       	mov	r0, r31
    24dc:	f0 e9       	ldi	r31, 0x90	; 144
    24de:	ef 2e       	mov	r14, r31
    24e0:	ff e5       	ldi	r31, 0x5F	; 95
    24e2:	ff 2e       	mov	r15, r31
    24e4:	f1 e0       	ldi	r31, 0x01	; 1
    24e6:	0f 2f       	mov	r16, r31
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	1f 2f       	mov	r17, r31
    24ec:	f0 2d       	mov	r31, r0
    24ee:	aa 24       	eor	r10, r10
    24f0:	bb 24       	eor	r11, r11
    24f2:	65 01       	movw	r12, r10
    24f4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Private_map>
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    
}
    2504:	26 96       	adiw	r28, 0x06	; 6
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	bf 90       	pop	r11
    2522:	af 90       	pop	r10
    2524:	08 95       	ret

00002526 <main>:
#include "LIB/MCAL/DIO/DIO_Interface.h"
#include "LIB/MCAL/UART_DRIVER/UART_INTERFACE.h"
#include "LIB/HAL/FlexSensor/FLEX_Interface.h"


void main(){
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	0f 92       	push	r0
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
MDIO_voidSetPortDirection(DIO_u8_PORTA,DIO_u8_OUTPUT);
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	0e 94 15 0c 	call	0x182a	; 0x182a <MDIO_voidSetPortDirection>
MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN4,DIO_u8_HIGH);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	64 e0       	ldi	r22, 0x04	; 4
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
	//ADC_voidInit();
	UART_INIT();
    2542:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <UART_INIT>

	while(1)
	{
		u8 i=UART_Recieve();
    2546:	0e 94 59 07 	call	0xeb2	; 0xeb2 <UART_Recieve>
    254a:	89 83       	std	Y+1, r24	; 0x01
	//	if(i=='f'){
			MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH); //input 1 high
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW); //input 3 LOW
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	62 e0       	ldi	r22, 0x02	; 2
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	63 e0       	ldi	r22, 0x03	; 3
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MDIO_voidSetPinValue>
    2574:	e8 cf       	rjmp	.-48     	; 0x2546 <main+0x20>

00002576 <__mulsi3>:
    2576:	62 9f       	mul	r22, r18
    2578:	d0 01       	movw	r26, r0
    257a:	73 9f       	mul	r23, r19
    257c:	f0 01       	movw	r30, r0
    257e:	82 9f       	mul	r24, r18
    2580:	e0 0d       	add	r30, r0
    2582:	f1 1d       	adc	r31, r1
    2584:	64 9f       	mul	r22, r20
    2586:	e0 0d       	add	r30, r0
    2588:	f1 1d       	adc	r31, r1
    258a:	92 9f       	mul	r25, r18
    258c:	f0 0d       	add	r31, r0
    258e:	83 9f       	mul	r24, r19
    2590:	f0 0d       	add	r31, r0
    2592:	74 9f       	mul	r23, r20
    2594:	f0 0d       	add	r31, r0
    2596:	65 9f       	mul	r22, r21
    2598:	f0 0d       	add	r31, r0
    259a:	99 27       	eor	r25, r25
    259c:	72 9f       	mul	r23, r18
    259e:	b0 0d       	add	r27, r0
    25a0:	e1 1d       	adc	r30, r1
    25a2:	f9 1f       	adc	r31, r25
    25a4:	63 9f       	mul	r22, r19
    25a6:	b0 0d       	add	r27, r0
    25a8:	e1 1d       	adc	r30, r1
    25aa:	f9 1f       	adc	r31, r25
    25ac:	bd 01       	movw	r22, r26
    25ae:	cf 01       	movw	r24, r30
    25b0:	11 24       	eor	r1, r1
    25b2:	08 95       	ret

000025b4 <__divmodsi4>:
    25b4:	97 fb       	bst	r25, 7
    25b6:	09 2e       	mov	r0, r25
    25b8:	05 26       	eor	r0, r21
    25ba:	0e d0       	rcall	.+28     	; 0x25d8 <__divmodsi4_neg1>
    25bc:	57 fd       	sbrc	r21, 7
    25be:	04 d0       	rcall	.+8      	; 0x25c8 <__divmodsi4_neg2>
    25c0:	14 d0       	rcall	.+40     	; 0x25ea <__udivmodsi4>
    25c2:	0a d0       	rcall	.+20     	; 0x25d8 <__divmodsi4_neg1>
    25c4:	00 1c       	adc	r0, r0
    25c6:	38 f4       	brcc	.+14     	; 0x25d6 <__divmodsi4_exit>

000025c8 <__divmodsi4_neg2>:
    25c8:	50 95       	com	r21
    25ca:	40 95       	com	r20
    25cc:	30 95       	com	r19
    25ce:	21 95       	neg	r18
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	4f 4f       	sbci	r20, 0xFF	; 255
    25d4:	5f 4f       	sbci	r21, 0xFF	; 255

000025d6 <__divmodsi4_exit>:
    25d6:	08 95       	ret

000025d8 <__divmodsi4_neg1>:
    25d8:	f6 f7       	brtc	.-4      	; 0x25d6 <__divmodsi4_exit>
    25da:	90 95       	com	r25
    25dc:	80 95       	com	r24
    25de:	70 95       	com	r23
    25e0:	61 95       	neg	r22
    25e2:	7f 4f       	sbci	r23, 0xFF	; 255
    25e4:	8f 4f       	sbci	r24, 0xFF	; 255
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	08 95       	ret

000025ea <__udivmodsi4>:
    25ea:	a1 e2       	ldi	r26, 0x21	; 33
    25ec:	1a 2e       	mov	r1, r26
    25ee:	aa 1b       	sub	r26, r26
    25f0:	bb 1b       	sub	r27, r27
    25f2:	fd 01       	movw	r30, r26
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <__udivmodsi4_ep>

000025f6 <__udivmodsi4_loop>:
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	ee 1f       	adc	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	a2 17       	cp	r26, r18
    2600:	b3 07       	cpc	r27, r19
    2602:	e4 07       	cpc	r30, r20
    2604:	f5 07       	cpc	r31, r21
    2606:	20 f0       	brcs	.+8      	; 0x2610 <__udivmodsi4_ep>
    2608:	a2 1b       	sub	r26, r18
    260a:	b3 0b       	sbc	r27, r19
    260c:	e4 0b       	sbc	r30, r20
    260e:	f5 0b       	sbc	r31, r21

00002610 <__udivmodsi4_ep>:
    2610:	66 1f       	adc	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	88 1f       	adc	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	1a 94       	dec	r1
    261a:	69 f7       	brne	.-38     	; 0x25f6 <__udivmodsi4_loop>
    261c:	60 95       	com	r22
    261e:	70 95       	com	r23
    2620:	80 95       	com	r24
    2622:	90 95       	com	r25
    2624:	9b 01       	movw	r18, r22
    2626:	ac 01       	movw	r20, r24
    2628:	bd 01       	movw	r22, r26
    262a:	cf 01       	movw	r24, r30
    262c:	08 95       	ret

0000262e <__prologue_saves__>:
    262e:	2f 92       	push	r2
    2630:	3f 92       	push	r3
    2632:	4f 92       	push	r4
    2634:	5f 92       	push	r5
    2636:	6f 92       	push	r6
    2638:	7f 92       	push	r7
    263a:	8f 92       	push	r8
    263c:	9f 92       	push	r9
    263e:	af 92       	push	r10
    2640:	bf 92       	push	r11
    2642:	cf 92       	push	r12
    2644:	df 92       	push	r13
    2646:	ef 92       	push	r14
    2648:	ff 92       	push	r15
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	ca 1b       	sub	r28, r26
    2658:	db 0b       	sbc	r29, r27
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	09 94       	ijmp

00002666 <__epilogue_restores__>:
    2666:	2a 88       	ldd	r2, Y+18	; 0x12
    2668:	39 88       	ldd	r3, Y+17	; 0x11
    266a:	48 88       	ldd	r4, Y+16	; 0x10
    266c:	5f 84       	ldd	r5, Y+15	; 0x0f
    266e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2670:	7d 84       	ldd	r7, Y+13	; 0x0d
    2672:	8c 84       	ldd	r8, Y+12	; 0x0c
    2674:	9b 84       	ldd	r9, Y+11	; 0x0b
    2676:	aa 84       	ldd	r10, Y+10	; 0x0a
    2678:	b9 84       	ldd	r11, Y+9	; 0x09
    267a:	c8 84       	ldd	r12, Y+8	; 0x08
    267c:	df 80       	ldd	r13, Y+7	; 0x07
    267e:	ee 80       	ldd	r14, Y+6	; 0x06
    2680:	fd 80       	ldd	r15, Y+5	; 0x05
    2682:	0c 81       	ldd	r16, Y+4	; 0x04
    2684:	1b 81       	ldd	r17, Y+3	; 0x03
    2686:	aa 81       	ldd	r26, Y+2	; 0x02
    2688:	b9 81       	ldd	r27, Y+1	; 0x01
    268a:	ce 0f       	add	r28, r30
    268c:	d1 1d       	adc	r29, r1
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	ed 01       	movw	r28, r26
    269a:	08 95       	ret

0000269c <_exit>:
    269c:	f8 94       	cli

0000269e <__stop_program>:
    269e:	ff cf       	rjmp	.-2      	; 0x269e <__stop_program>
