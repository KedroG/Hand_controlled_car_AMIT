
HandGesture_Car_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000022ce  00002342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019ec  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d66  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00004d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00004f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000733a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  000086b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000988c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00009a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00009d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a70d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a4 10 	call	0x2148	; 0x2148 <main>
      7a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 36 11 	jmp	0x226c	; 0x226c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 37 11 	jmp	0x226e	; 0x226e <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e8 59       	subi	r30, 0x98	; 152
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <UART_Init>:



//============================================================================================
extern void UART_Init (void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62

	/*  Store the low byte of the UBBR*/
	UBRRL =  (u8) MyUBRR;
     df0:	e9 e2       	ldi	r30, 0x29	; 41
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	87 e6       	ldi	r24, 0x67	; 103
     df6:	80 83       	st	Z, r24

	/*  Store the High byte of the UBBR*/
	UBRRH = (u8)((MyUBRR)>>8);
     df8:	e0 e4       	ldi	r30, 0x40	; 64
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	10 82       	st	Z, r1

	/* Configuration of UCSRnA Register  */
	UCSRnA= ( (U2X<<1) | (MPCM<<0) );
     dfe:	eb e2       	ldi	r30, 0x2B	; 43
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	10 82       	st	Z, r1

	/* Enable Transmit bit(3) and Receive bit(4) in UCSRnC Register */
	UCSRnB = ( (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) );
     e04:	ea e2       	ldi	r30, 0x2A	; 42
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	88 e1       	ldi	r24, 0x18	; 24
     e0a:	80 83       	st	Z, r24

	/* Configure UCRnC Register to make 8-bit data & 1 stop bit & no parity  Asynchronous Mode*/
	UCSRnC = ((URSEL << 7) | (UMSEL << 6) | (UPM1 << 5) | (UPM0 << 4)
     e0c:	e0 e4       	ldi	r30, 0x40	; 64
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	86 e8       	ldi	r24, 0x86	; 134
     e12:	80 83       	st	Z, r24
			| (USBS << 3) | (UCSZ1 << 2) | (UCSZ0 << 1));

	//set_bit(SREG,7);
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <UART_TransmitData>:

//==================================================================================================
extern void UART_TransmitData (u8 UART_DataToBeSent)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_DataToBeSent;
     e26:	ec e2       	ldi	r30, 0x2C	; 44
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
     e2e:	eb e2       	ldi	r30, 0x2B	; 43
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	82 95       	swap	r24
     e36:	86 95       	lsr	r24
     e38:	87 70       	andi	r24, 0x07	; 7
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	81 70       	andi	r24, 0x01	; 1
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	a1 f3       	breq	.-24     	; 0xe2e <UART_TransmitData+0x14>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
     e46:	ab e2       	ldi	r26, 0x2B	; 43
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	eb e2       	ldi	r30, 0x2B	; 43
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 64       	ori	r24, 0x40	; 64
     e52:	8c 93       	st	X, r24
}
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <UART_RecieveData>:
///////////////////////////////////////////////////////////////////////////////////////////////////
extern u8 UART_RecieveData(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	//while ( ! (UCSRnA & (1<<7)) );
	while(GET_BIT(UCSRnA,7)==0);
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	dc f7       	brge	.-10     	; 0xe64 <UART_RecieveData+0x8>
	return UDR;
     e6e:	ec e2       	ldi	r30, 0x2C	; 44
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z

}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <UART_voidPrintf>:
//====================================================================================================
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <UART_voidPrintf+0x6>
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	9b 83       	std	Y+3, r25	; 0x03
     e88:	8a 83       	std	Y+2, r24	; 0x02

	u8 iterator=0;
     e8a:	19 82       	std	Y+1, r1	; 0x01

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     e8c:	19 82       	std	Y+1, r1	; 0x01
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <UART_voidPrintf+0x32>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	9b 81       	ldd	r25, Y+3	; 0x03
     e9a:	fc 01       	movw	r30, r24
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	80 81       	ld	r24, Z
     ea2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <UART_TransmitData>
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{

	u8 iterator=0;

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	9b 81       	ldd	r25, Y+3	; 0x03
     eb6:	fc 01       	movw	r30, r24
     eb8:	e2 0f       	add	r30, r18
     eba:	f3 1f       	adc	r31, r19
     ebc:	80 81       	ld	r24, Z
     ebe:	88 23       	and	r24, r24
     ec0:	39 f7       	brne	.-50     	; 0xe90 <UART_voidPrintf+0x16>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);

	}

}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <MDIO_voidSetPinDirection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void MDIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	2d 97       	sbiw	r28, 0x0d	; 13
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	6a 83       	std	Y+2, r22	; 0x02
     ee6:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	08 f0       	brcs	.+2      	; 0xef0 <MDIO_voidSetPinDirection+0x22>
     eee:	04 c1       	rjmp	.+520    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	88 30       	cpi	r24, 0x08	; 8
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <MDIO_voidSetPinDirection+0x2a>
     ef6:	00 c1       	rjmp	.+512    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3d 87       	std	Y+13, r19	; 0x0d
     f00:	2c 87       	std	Y+12, r18	; 0x0c
     f02:	8c 85       	ldd	r24, Y+12	; 0x0c
     f04:	9d 85       	ldd	r25, Y+13	; 0x0d
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <MDIO_voidSetPinDirection+0x40>
     f0c:	4f c0       	rjmp	.+158    	; 0xfac <MDIO_voidSetPinDirection+0xde>
     f0e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f10:	3d 85       	ldd	r19, Y+13	; 0x0d
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	2c f4       	brge	.+10     	; 0xf22 <MDIO_voidSetPinDirection+0x54>
     f18:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	71 f0       	breq	.+28     	; 0xf3c <MDIO_voidSetPinDirection+0x6e>
     f20:	eb c0       	rjmp	.+470    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
     f22:	2c 85       	ldd	r18, Y+12	; 0x0c
     f24:	3d 85       	ldd	r19, Y+13	; 0x0d
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	09 f4       	brne	.+2      	; 0xf2e <MDIO_voidSetPinDirection+0x60>
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <MDIO_voidSetPinDirection+0x14e>
     f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f30:	9d 85       	ldd	r25, Y+13	; 0x0d
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <MDIO_voidSetPinDirection+0x6c>
     f38:	a9 c0       	rjmp	.+338    	; 0x108c <MDIO_voidSetPinDirection+0x1be>
     f3a:	de c0       	rjmp	.+444    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8PinDirection) //Check on Direction
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3b 87       	std	Y+11, r19	; 0x0b
     f44:	2a 87       	std	Y+10, r18	; 0x0a
     f46:	8a 85       	ldd	r24, Y+10	; 0x0a
     f48:	9b 85       	ldd	r25, Y+11	; 0x0b
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	d1 f0       	breq	.+52     	; 0xf82 <MDIO_voidSetPinDirection+0xb4>
     f4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f50:	3b 85       	ldd	r19, Y+11	; 0x0b
     f52:	21 30       	cpi	r18, 0x01	; 1
     f54:	31 05       	cpc	r19, r1
     f56:	09 f0       	breq	.+2      	; 0xf5a <MDIO_voidSetPinDirection+0x8c>
     f58:	cf c0       	rjmp	.+414    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Output
     f5a:	aa e3       	ldi	r26, 0x3A	; 58
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ea e3       	ldi	r30, 0x3A	; 58
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <MDIO_voidSetPinDirection+0xaa>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <MDIO_voidSetPinDirection+0xa6>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	bb c0       	rjmp	.+374    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Input
     f82:	aa e3       	ldi	r26, 0x3A	; 58
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ea e3       	ldi	r30, 0x3A	; 58
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <MDIO_voidSetPinDirection+0xd2>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <MDIO_voidSetPinDirection+0xce>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	a6 c0       	rjmp	.+332    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8PinDirection) //Check on Direction
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	39 87       	std	Y+9, r19	; 0x09
     fb4:	28 87       	std	Y+8, r18	; 0x08
     fb6:	88 85       	ldd	r24, Y+8	; 0x08
     fb8:	99 85       	ldd	r25, Y+9	; 0x09
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	d1 f0       	breq	.+52     	; 0xff2 <MDIO_voidSetPinDirection+0x124>
     fbe:	28 85       	ldd	r18, Y+8	; 0x08
     fc0:	39 85       	ldd	r19, Y+9	; 0x09
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	31 05       	cpc	r19, r1
     fc6:	09 f0       	breq	.+2      	; 0xfca <MDIO_voidSetPinDirection+0xfc>
     fc8:	97 c0       	rjmp	.+302    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Output
     fca:	a7 e3       	ldi	r26, 0x37	; 55
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e7 e3       	ldi	r30, 0x37	; 55
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <MDIO_voidSetPinDirection+0x11a>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <MDIO_voidSetPinDirection+0x116>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	83 c0       	rjmp	.+262    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Input
     ff2:	a7 e3       	ldi	r26, 0x37	; 55
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e3       	ldi	r30, 0x37	; 55
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <MDIO_voidSetPinDirection+0x142>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <MDIO_voidSetPinDirection+0x13e>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	6e c0       	rjmp	.+220    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8PinDirection) //Check on Direction
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3f 83       	std	Y+7, r19	; 0x07
    1024:	2e 83       	std	Y+6, r18	; 0x06
    1026:	8e 81       	ldd	r24, Y+6	; 0x06
    1028:	9f 81       	ldd	r25, Y+7	; 0x07
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	d1 f0       	breq	.+52     	; 0x1062 <MDIO_voidSetPinDirection+0x194>
    102e:	2e 81       	ldd	r18, Y+6	; 0x06
    1030:	3f 81       	ldd	r19, Y+7	; 0x07
    1032:	21 30       	cpi	r18, 0x01	; 1
    1034:	31 05       	cpc	r19, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <MDIO_voidSetPinDirection+0x16c>
    1038:	5f c0       	rjmp	.+190    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Output
    103a:	a4 e3       	ldi	r26, 0x34	; 52
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <MDIO_voidSetPinDirection+0x18a>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <MDIO_voidSetPinDirection+0x186>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	4b c0       	rjmp	.+150    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Input
    1062:	a4 e3       	ldi	r26, 0x34	; 52
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e4 e3       	ldi	r30, 0x34	; 52
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <MDIO_voidSetPinDirection+0x1b2>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <MDIO_voidSetPinDirection+0x1ae>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	36 c0       	rjmp	.+108    	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8PinDirection) //Check on Direction
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3d 83       	std	Y+5, r19	; 0x05
    1094:	2c 83       	std	Y+4, r18	; 0x04
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	c9 f0       	breq	.+50     	; 0x10d0 <MDIO_voidSetPinDirection+0x202>
    109e:	2c 81       	ldd	r18, Y+4	; 0x04
    10a0:	3d 81       	ldd	r19, Y+5	; 0x05
    10a2:	21 30       	cpi	r18, 0x01	; 1
    10a4:	31 05       	cpc	r19, r1
    10a6:	41 f5       	brne	.+80     	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Output
    10a8:	a1 e3       	ldi	r26, 0x31	; 49
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e1 e3       	ldi	r30, 0x31	; 49
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <MDIO_voidSetPinDirection+0x1f8>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <MDIO_voidSetPinDirection+0x1f4>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	14 c0       	rjmp	.+40     	; 0x10f8 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Input
    10d0:	a1 e3       	ldi	r26, 0x31	; 49
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e1 e3       	ldi	r30, 0x31	; 49
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <MDIO_voidSetPinDirection+0x220>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <MDIO_voidSetPinDirection+0x21c>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
    10f8:	2d 96       	adiw	r28, 0x0d	; 13
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <MDIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void MDIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Value)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	2d 97       	sbiw	r28, 0x0d	; 13
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	6a 83       	std	Y+2, r22	; 0x02
    1122:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	84 30       	cpi	r24, 0x04	; 4
    1128:	08 f0       	brcs	.+2      	; 0x112c <MDIO_voidSetPinValue+0x22>
    112a:	04 c1       	rjmp	.+520    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <MDIO_voidSetPinValue+0x2a>
    1132:	00 c1       	rjmp	.+512    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 87       	std	Y+13, r19	; 0x0d
    113c:	2c 87       	std	Y+12, r18	; 0x0c
    113e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1140:	9d 85       	ldd	r25, Y+13	; 0x0d
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <MDIO_voidSetPinValue+0x40>
    1148:	4f c0       	rjmp	.+158    	; 0x11e8 <MDIO_voidSetPinValue+0xde>
    114a:	2c 85       	ldd	r18, Y+12	; 0x0c
    114c:	3d 85       	ldd	r19, Y+13	; 0x0d
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <MDIO_voidSetPinValue+0x54>
    1154:	8c 85       	ldd	r24, Y+12	; 0x0c
    1156:	9d 85       	ldd	r25, Y+13	; 0x0d
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	71 f0       	breq	.+28     	; 0x1178 <MDIO_voidSetPinValue+0x6e>
    115c:	eb c0       	rjmp	.+470    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
    115e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1160:	3d 85       	ldd	r19, Y+13	; 0x0d
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	09 f4       	brne	.+2      	; 0x116a <MDIO_voidSetPinValue+0x60>
    1168:	77 c0       	rjmp	.+238    	; 0x1258 <MDIO_voidSetPinValue+0x14e>
    116a:	8c 85       	ldd	r24, Y+12	; 0x0c
    116c:	9d 85       	ldd	r25, Y+13	; 0x0d
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	91 05       	cpc	r25, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <MDIO_voidSetPinValue+0x6c>
    1174:	a9 c0       	rjmp	.+338    	; 0x12c8 <MDIO_voidSetPinValue+0x1be>
    1176:	de c0       	rjmp	.+444    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8Value) //Check on Value
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	3b 87       	std	Y+11, r19	; 0x0b
    1180:	2a 87       	std	Y+10, r18	; 0x0a
    1182:	8a 85       	ldd	r24, Y+10	; 0x0a
    1184:	9b 85       	ldd	r25, Y+11	; 0x0b
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	d1 f0       	breq	.+52     	; 0x11be <MDIO_voidSetPinValue+0xb4>
    118a:	2a 85       	ldd	r18, Y+10	; 0x0a
    118c:	3b 85       	ldd	r19, Y+11	; 0x0b
    118e:	21 30       	cpi	r18, 0x01	; 1
    1190:	31 05       	cpc	r19, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <MDIO_voidSetPinValue+0x8c>
    1194:	cf c0       	rjmp	.+414    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as High
    1196:	ab e3       	ldi	r26, 0x3B	; 59
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	eb e3       	ldi	r30, 0x3B	; 59
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <MDIO_voidSetPinValue+0xaa>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <MDIO_voidSetPinValue+0xa6>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	bb c0       	rjmp	.+374    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as Low
    11be:	ab e3       	ldi	r26, 0x3B	; 59
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	eb e3       	ldi	r30, 0x3B	; 59
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <MDIO_voidSetPinValue+0xd2>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <MDIO_voidSetPinValue+0xce>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	a6 c0       	rjmp	.+332    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8Value) //Check on Value
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	39 87       	std	Y+9, r19	; 0x09
    11f0:	28 87       	std	Y+8, r18	; 0x08
    11f2:	88 85       	ldd	r24, Y+8	; 0x08
    11f4:	99 85       	ldd	r25, Y+9	; 0x09
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	d1 f0       	breq	.+52     	; 0x122e <MDIO_voidSetPinValue+0x124>
    11fa:	28 85       	ldd	r18, Y+8	; 0x08
    11fc:	39 85       	ldd	r19, Y+9	; 0x09
    11fe:	21 30       	cpi	r18, 0x01	; 1
    1200:	31 05       	cpc	r19, r1
    1202:	09 f0       	breq	.+2      	; 0x1206 <MDIO_voidSetPinValue+0xfc>
    1204:	97 c0       	rjmp	.+302    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as High
    1206:	a8 e3       	ldi	r26, 0x38	; 56
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <MDIO_voidSetPinValue+0x11a>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <MDIO_voidSetPinValue+0x116>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	83 c0       	rjmp	.+262    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as Low
    122e:	a8 e3       	ldi	r26, 0x38	; 56
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e8 e3       	ldi	r30, 0x38	; 56
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <MDIO_voidSetPinValue+0x142>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <MDIO_voidSetPinValue+0x13e>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	6e c0       	rjmp	.+220    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8Value) //Check on Value
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3f 83       	std	Y+7, r19	; 0x07
    1260:	2e 83       	std	Y+6, r18	; 0x06
    1262:	8e 81       	ldd	r24, Y+6	; 0x06
    1264:	9f 81       	ldd	r25, Y+7	; 0x07
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	d1 f0       	breq	.+52     	; 0x129e <MDIO_voidSetPinValue+0x194>
    126a:	2e 81       	ldd	r18, Y+6	; 0x06
    126c:	3f 81       	ldd	r19, Y+7	; 0x07
    126e:	21 30       	cpi	r18, 0x01	; 1
    1270:	31 05       	cpc	r19, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <MDIO_voidSetPinValue+0x16c>
    1274:	5f c0       	rjmp	.+190    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as High
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <MDIO_voidSetPinValue+0x18a>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <MDIO_voidSetPinValue+0x186>
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	4b c0       	rjmp	.+150    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as Low
    129e:	a5 e3       	ldi	r26, 0x35	; 53
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <MDIO_voidSetPinValue+0x1b2>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <MDIO_voidSetPinValue+0x1ae>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	36 c0       	rjmp	.+108    	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8Value) //Check on Value
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3d 83       	std	Y+5, r19	; 0x05
    12d0:	2c 83       	std	Y+4, r18	; 0x04
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	c9 f0       	breq	.+50     	; 0x130c <MDIO_voidSetPinValue+0x202>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	21 30       	cpi	r18, 0x01	; 1
    12e0:	31 05       	cpc	r19, r1
    12e2:	41 f5       	brne	.+80     	; 0x1334 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as High
    12e4:	a2 e3       	ldi	r26, 0x32	; 50
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e2 e3       	ldi	r30, 0x32	; 50
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MDIO_voidSetPinValue+0x1f8>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <MDIO_voidSetPinValue+0x1f4>
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as Low
    130c:	a2 e3       	ldi	r26, 0x32	; 50
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e2 e3       	ldi	r30, 0x32	; 50
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <MDIO_voidSetPinValue+0x220>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <MDIO_voidSetPinValue+0x21c>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
    1334:	2d 96       	adiw	r28, 0x0d	; 13
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <MDIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8   MDIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <MDIO_u8GetPinValue+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <MDIO_u8GetPinValue+0x8>
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value=2; //set initial value for needed pin value
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	89 83       	std	Y+1, r24	; 0x01

	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	08 f0       	brcs	.+2      	; 0x1364 <MDIO_u8GetPinValue+0x1e>
    1362:	6b c0       	rjmp	.+214    	; 0x143a <MDIO_u8GetPinValue+0xf4>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	08 f0       	brcs	.+2      	; 0x136c <MDIO_u8GetPinValue+0x26>
    136a:	67 c0       	rjmp	.+206    	; 0x143a <MDIO_u8GetPinValue+0xf4>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3d 83       	std	Y+5, r19	; 0x05
    1374:	2c 83       	std	Y+4, r18	; 0x04
    1376:	4c 81       	ldd	r20, Y+4	; 0x04
    1378:	5d 81       	ldd	r21, Y+5	; 0x05
    137a:	41 30       	cpi	r20, 0x01	; 1
    137c:	51 05       	cpc	r21, r1
    137e:	41 f1       	breq	.+80     	; 0x13d0 <MDIO_u8GetPinValue+0x8a>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	91 05       	cpc	r25, r1
    1388:	34 f4       	brge	.+12     	; 0x1396 <MDIO_u8GetPinValue+0x50>
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	21 15       	cp	r18, r1
    1390:	31 05       	cpc	r19, r1
    1392:	61 f0       	breq	.+24     	; 0x13ac <MDIO_u8GetPinValue+0x66>
    1394:	52 c0       	rjmp	.+164    	; 0x143a <MDIO_u8GetPinValue+0xf4>
    1396:	4c 81       	ldd	r20, Y+4	; 0x04
    1398:	5d 81       	ldd	r21, Y+5	; 0x05
    139a:	42 30       	cpi	r20, 0x02	; 2
    139c:	51 05       	cpc	r21, r1
    139e:	51 f1       	breq	.+84     	; 0x13f4 <MDIO_u8GetPinValue+0xae>
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	b9 f1       	breq	.+110    	; 0x1418 <MDIO_u8GetPinValue+0xd2>
    13aa:	47 c0       	rjmp	.+142    	; 0x143a <MDIO_u8GetPinValue+0xf4>
		{
		case DIO_u8_PORTA:
							local_u8Value = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);  // Read the pin value
    13ac:	e9 e3       	ldi	r30, 0x39	; 57
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <MDIO_u8GetPinValue+0x7e>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <MDIO_u8GetPinValue+0x7a>
    13c8:	ca 01       	movw	r24, r20
    13ca:	81 70       	andi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	35 c0       	rjmp	.+106    	; 0x143a <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTB:
							local_u8Value = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId); // Read the pin value
    13d0:	e6 e3       	ldi	r30, 0x36	; 54
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <MDIO_u8GetPinValue+0xa2>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <MDIO_u8GetPinValue+0x9e>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	23 c0       	rjmp	.+70     	; 0x143a <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTC:
							local_u8Value = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId); // Read the pin value
    13f4:	e3 e3       	ldi	r30, 0x33	; 51
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <MDIO_u8GetPinValue+0xc6>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <MDIO_u8GetPinValue+0xc2>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	11 c0       	rjmp	.+34     	; 0x143a <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTD:
							local_u8Value = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId); // Read the pin value
    1418:	e0 e3       	ldi	r30, 0x30	; 48
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a9 01       	movw	r20, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <MDIO_u8GetPinValue+0xea>
    142c:	55 95       	asr	r21
    142e:	47 95       	ror	r20
    1430:	8a 95       	dec	r24
    1432:	e2 f7       	brpl	.-8      	; 0x142c <MDIO_u8GetPinValue+0xe6>
    1434:	ca 01       	movw	r24, r20
    1436:	81 70       	andi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else

	return local_u8Value;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <MDIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void MDIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <MDIO_voidSetPortDirection+0x6>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <MDIO_voidSetPortDirection+0x8>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	84 30       	cpi	r24, 0x04	; 4
    1460:	90 f5       	brcc	.+100    	; 0x14c6 <MDIO_voidSetPortDirection+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3c 83       	std	Y+4, r19	; 0x04
    146a:	2b 83       	std	Y+3, r18	; 0x03
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	d1 f0       	breq	.+52     	; 0x14aa <MDIO_voidSetPortDirection+0x5e>
    1476:	2b 81       	ldd	r18, Y+3	; 0x03
    1478:	3c 81       	ldd	r19, Y+4	; 0x04
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <MDIO_voidSetPortDirection+0x3e>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	61 f0       	breq	.+24     	; 0x14a0 <MDIO_voidSetPortDirection+0x54>
    1488:	1e c0       	rjmp	.+60     	; 0x14c6 <MDIO_voidSetPortDirection+0x7a>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	81 f0       	breq	.+32     	; 0x14b4 <MDIO_voidSetPortDirection+0x68>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <MDIO_voidSetPortDirection+0x72>
    149e:	13 c0       	rjmp	.+38     	; 0x14c6 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_DDRA_REG=copy_u8PortDirection;  // Set the port Direction
    14a0:	ea e3       	ldi	r30, 0x3A	; 58
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	80 83       	st	Z, r24
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_DDRB_REG=copy_u8PortDirection;  // Set the port Direction
    14aa:	e7 e3       	ldi	r30, 0x37	; 55
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_DDRC_REG=copy_u8PortDirection;  // Set the port Direction
    14b4:	e4 e3       	ldi	r30, 0x34	; 52
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_DDRD_REG=copy_u8PortDirection;  // Set the port Direction
    14be:	e1 e3       	ldi	r30, 0x31	; 49
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <MDIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void MDIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <MDIO_voidSetPortValue+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <MDIO_voidSetPortValue+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	90 f5       	brcc	.+100    	; 0x154e <MDIO_voidSetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3c 83       	std	Y+4, r19	; 0x04
    14f2:	2b 83       	std	Y+3, r18	; 0x03
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	d1 f0       	breq	.+52     	; 0x1532 <MDIO_voidSetPortValue+0x5e>
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <MDIO_voidSetPortValue+0x3e>
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 f0       	breq	.+24     	; 0x1528 <MDIO_voidSetPortValue+0x54>
    1510:	1e c0       	rjmp	.+60     	; 0x154e <MDIO_voidSetPortValue+0x7a>
    1512:	2b 81       	ldd	r18, Y+3	; 0x03
    1514:	3c 81       	ldd	r19, Y+4	; 0x04
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	81 f0       	breq	.+32     	; 0x153c <MDIO_voidSetPortValue+0x68>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	81 f0       	breq	.+32     	; 0x1546 <MDIO_voidSetPortValue+0x72>
    1526:	13 c0       	rjmp	.+38     	; 0x154e <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_PORTA_REG=copy_u8PortValue;  // Set the port Value
    1528:	eb e3       	ldi	r30, 0x3B	; 59
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
    1530:	0e c0       	rjmp	.+28     	; 0x154e <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_PORTB_REG=copy_u8PortValue;  // Set the port Value
    1532:	e8 e3       	ldi	r30, 0x38	; 56
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	80 83       	st	Z, r24
    153a:	09 c0       	rjmp	.+18     	; 0x154e <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_PORTC_REG=copy_u8PortValue;  // Set the port Value
    153c:	e5 e3       	ldi	r30, 0x35	; 53
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 83       	st	Z, r24
    1544:	04 c0       	rjmp	.+8      	; 0x154e <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_PORTD_REG=copy_u8PortValue;  // Set the port Value
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <MDIO_voidGetPortValue>:
/******************************************************************************/
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/******************************************************************************/
u8 MDIO_voidGetPortValue(u8 copy_u8PortId)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <MDIO_voidGetPortValue+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <MDIO_voidGetPortValue+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8PortValue=0;
    156a:	19 82       	std	Y+1, r1	; 0x01
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	90 f5       	brcc	.+100    	; 0x15d6 <MDIO_voidGetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3c 83       	std	Y+4, r19	; 0x04
    157a:	2b 83       	std	Y+3, r18	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	d1 f0       	breq	.+52     	; 0x15ba <MDIO_voidGetPortValue+0x5e>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	2c f4       	brge	.+10     	; 0x159a <MDIO_voidGetPortValue+0x3e>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 f0       	breq	.+24     	; 0x15b0 <MDIO_voidGetPortValue+0x54>
    1598:	1e c0       	rjmp	.+60     	; 0x15d6 <MDIO_voidGetPortValue+0x7a>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <MDIO_voidGetPortValue+0x68>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <MDIO_voidGetPortValue+0x72>
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <MDIO_voidGetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							local_u8PortValue = DIO_u8_PINA_REG;  // Read the port Value
    15b0:	e9 e3       	ldi	r30, 0x39	; 57
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							local_u8PortValue = DIO_u8_PINB_REG;  // Read the port Value
    15ba:	e6 e3       	ldi	r30, 0x36	; 54
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							local_u8PortValue = DIO_u8_PINC_REG;  // Read the port Value
    15c4:	e3 e3       	ldi	r30, 0x33	; 51
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							local_u8PortValue = DIO_u8_PIND_REG;  // Read the port Value
    15ce:	e0 e3       	ldi	r30, 0x30	; 48
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else
	return local_u8PortValue; // return port value
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <ADC_voidInit>:

#include "ADC_Interface.h"
#include "ADC_Private.h"

void ADC_voidInit(void)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
    15ee:	a7 e2       	ldi	r26, 0x27	; 39
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e7 e2       	ldi	r30, 0x27	; 39
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8f 77       	andi	r24, 0x7F	; 127
    15fa:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
    15fc:	a7 e2       	ldi	r26, 0x27	; 39
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e2       	ldi	r30, 0x27	; 39
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	80 64       	ori	r24, 0x40	; 64
    1608:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
    160a:	a7 e2       	ldi	r26, 0x27	; 39
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e7 e2       	ldi	r30, 0x27	; 39
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8f 7d       	andi	r24, 0xDF	; 223
    1616:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
    1618:	a6 e2       	ldi	r26, 0x26	; 38
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e6 e2       	ldi	r30, 0x26	; 38
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8f 7d       	andi	r24, 0xDF	; 223
    1624:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
    1626:	a6 e2       	ldi	r26, 0x26	; 38
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e6 e2       	ldi	r30, 0x26	; 38
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	84 60       	ori	r24, 0x04	; 4
    1632:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
    1634:	a6 e2       	ldi	r26, 0x26	; 38
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e6 e2       	ldi	r30, 0x26	; 38
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
    1642:	a6 e2       	ldi	r26, 0x26	; 38
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e6 e2       	ldi	r30, 0x26	; 38
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8e 7f       	andi	r24, 0xFE	; 254
    164e:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
    1650:	a6 e2       	ldi	r26, 0x26	; 38
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e6 e2       	ldi	r30, 0x26	; 38
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	8c 93       	st	X, r24
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <ADC_u8GetDigitalValue>:

u16   ADC_u8GetDigitalValue(u8 Copy_u8ChannelNb)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <ADC_u8GetDigitalValue+0x6>
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue=0;
    1672:	1a 82       	std	Y+2, r1	; 0x02
    1674:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8ChannelNb < 32))
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	80 32       	cpi	r24, 0x20	; 32
    167a:	c8 f5       	brcc	.+114    	; 0x16ee <ADC_u8GetDigitalValue+0x8a>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    167c:	a7 e2       	ldi	r26, 0x27	; 39
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e7 e2       	ldi	r30, 0x27	; 39
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 7e       	andi	r24, 0xE0	; 224
    1688:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    168a:	a7 e2       	ldi	r26, 0x27	; 39
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e7 e2       	ldi	r30, 0x27	; 39
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	90 81       	ld	r25, Z
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    169a:	a6 e2       	ldi	r26, 0x26	; 38
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e6 e2       	ldi	r30, 0x26	; 38
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 64       	ori	r24, 0x40	; 64
    16a6:	8c 93       	st	X, r24
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0))
    16a8:	e6 e2       	ldi	r30, 0x26	; 38
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	82 95       	swap	r24
    16b0:	8f 70       	andi	r24, 0x0F	; 15
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	90 70       	andi	r25, 0x00	; 0
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	a9 f3       	breq	.-22     	; 0x16a8 <ADC_u8GetDigitalValue+0x44>
		{

		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
    16be:	e6 e2       	ldi	r30, 0x26	; 38
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	82 95       	swap	r24
    16c6:	8f 70       	andi	r24, 0x0F	; 15
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	90 70       	andi	r25, 0x00	; 0
    16d0:	88 23       	and	r24, r24
    16d2:	69 f0       	breq	.+26     	; 0x16ee <ADC_u8GetDigitalValue+0x8a>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    16d4:	a6 e2       	ldi	r26, 0x26	; 38
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e6 e2       	ldi	r30, 0x26	; 38
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 61       	ori	r24, 0x10	; 16
    16e0:	8c 93       	st	X, r24
			/* Read the Digital Value */
			local_u16DigitalValue = ADC_u16_ADC_REG;
    16e2:	e4 e2       	ldi	r30, 0x24	; 36
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
return local_u16DigitalValue;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <Private_voidSendInstruction>:
#include "../../MCAL/DIO/DIO_Private.h"
#include "../../MCAL/DIO/DIO_Configuration.h"


void Private_voidSendInstruction(u8 copy_u8Instruction)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	2f 97       	sbiw	r28, 0x0f	; 15
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	8f 87       	std	Y+15, r24	; 0x0f
	/*Instruction --> RS = 0, Writer --> RW = 0*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
	/*Instruction --> Data_Port*/
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Instruction);
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	6f 85       	ldd	r22, Y+15	; 0x0f
    172c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <MDIO_voidSetPortValue>
	/*Enable --> Falling Edge (1 then 0)*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e4       	ldi	r27, 0x40	; 64
    1742:	8b 87       	std	Y+11, r24	; 0x0b
    1744:	9c 87       	std	Y+12, r25	; 0x0c
    1746:	ad 87       	std	Y+13, r26	; 0x0d
    1748:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174a:	6b 85       	ldd	r22, Y+11	; 0x0b
    174c:	7c 85       	ldd	r23, Y+12	; 0x0c
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a e7       	ldi	r20, 0x7A	; 122
    1758:	55 e4       	ldi	r21, 0x45	; 69
    175a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	8f 83       	std	Y+7, r24	; 0x07
    1764:	98 87       	std	Y+8, r25	; 0x08
    1766:	a9 87       	std	Y+9, r26	; 0x09
    1768:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e8       	ldi	r20, 0x80	; 128
    1778:	5f e3       	ldi	r21, 0x3F	; 63
    177a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    177e:	88 23       	and	r24, r24
    1780:	2c f4       	brge	.+10     	; 0x178c <Private_voidSendInstruction+0x8e>
		__ticks = 1;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	3f c0       	rjmp	.+126    	; 0x180a <Private_voidSendInstruction+0x10c>
	else if (__tmp > 65535)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	4c f5       	brge	.+82     	; 0x17f6 <Private_voidSendInstruction+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e2       	ldi	r20, 0x20	; 32
    17b2:	51 e4       	ldi	r21, 0x41	; 65
    17b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <Private_voidSendInstruction+0xee>
    17ce:	80 e9       	ldi	r24, 0x90	; 144
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <Private_voidSendInstruction+0xdc>
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	69 f7       	brne	.-38     	; 0x17ce <Private_voidSendInstruction+0xd0>
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <Private_voidSendInstruction+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <Private_voidSendInstruction+0x118>
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
}
    1828:	2f 96       	adiw	r28, 0x0f	; 15
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <HLCD_voidInit>:


/*LCD Init*/
void HLCD_voidInit()
{
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	c6 54       	subi	r28, 0x46	; 70
    1848:	d0 40       	sbci	r29, 0x00	; 0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	fe 01       	movw	r30, r28
    1856:	ed 5b       	subi	r30, 0xBD	; 189
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 ef       	ldi	r26, 0xF0	; 240
    1860:	b1 e4       	ldi	r27, 0x41	; 65
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	8e 01       	movw	r16, r28
    186c:	01 5c       	subi	r16, 0xC1	; 193
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	ed 5b       	subi	r30, 0xBD	; 189
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a e7       	ldi	r20, 0x7A	; 122
    1884:	55 e4       	ldi	r21, 0x45	; 69
    1886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	f8 01       	movw	r30, r16
    1890:	80 83       	st	Z, r24
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	a2 83       	std	Z+2, r26	; 0x02
    1896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1898:	fe 01       	movw	r30, r28
    189a:	ff 96       	adiw	r30, 0x3f	; 63
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <HLCD_voidInit+0x84>
		__ticks = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9e af       	std	Y+62, r25	; 0x3e
    18ba:	8d af       	std	Y+61, r24	; 0x3d
    18bc:	46 c0       	rjmp	.+140    	; 0x194a <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    18be:	fe 01       	movw	r30, r28
    18c0:	ff 96       	adiw	r30, 0x3f	; 63
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	64 f5       	brge	.+88     	; 0x1932 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	fe 01       	movw	r30, r28
    18dc:	ed 5b       	subi	r30, 0xBD	; 189
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	9e af       	std	Y+62, r25	; 0x3e
    1906:	8d af       	std	Y+61, r24	; 0x3d
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <HLCD_voidInit+0xee>
    190a:	80 e9       	ldi	r24, 0x90	; 144
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	9c af       	std	Y+60, r25	; 0x3c
    1910:	8b af       	std	Y+59, r24	; 0x3b
    1912:	8b ad       	ldd	r24, Y+59	; 0x3b
    1914:	9c ad       	ldd	r25, Y+60	; 0x3c
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <HLCD_voidInit+0xdc>
    191a:	9c af       	std	Y+60, r25	; 0x3c
    191c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1920:	9e ad       	ldd	r25, Y+62	; 0x3e
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	9e af       	std	Y+62, r25	; 0x3e
    1926:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	8d ad       	ldd	r24, Y+61	; 0x3d
    192a:	9e ad       	ldd	r25, Y+62	; 0x3e
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	69 f7       	brne	.-38     	; 0x190a <HLCD_voidInit+0xd0>
    1930:	16 c0       	rjmp	.+44     	; 0x195e <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1932:	fe 01       	movw	r30, r28
    1934:	ff 96       	adiw	r30, 0x3f	; 63
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e af       	std	Y+62, r25	; 0x3e
    1948:	8d af       	std	Y+61, r24	; 0x3d
    194a:	8d ad       	ldd	r24, Y+61	; 0x3d
    194c:	9e ad       	ldd	r25, Y+62	; 0x3e
    194e:	9a af       	std	Y+58, r25	; 0x3a
    1950:	89 af       	std	Y+57, r24	; 0x39
    1952:	89 ad       	ldd	r24, Y+57	; 0x39
    1954:	9a ad       	ldd	r25, Y+58	; 0x3a
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <HLCD_voidInit+0x11c>
    195a:	9a af       	std	Y+58, r25	; 0x3a
    195c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	/*Fn set*/
	Private_voidSendInstruction(LCD_u8_FUNCTION_SET);
    195e:	8c e3       	ldi	r24, 0x3C	; 60
    1960:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 ef       	ldi	r26, 0xF0	; 240
    196a:	b1 e4       	ldi	r27, 0x41	; 65
    196c:	8d ab       	std	Y+53, r24	; 0x35
    196e:	9e ab       	std	Y+54, r25	; 0x36
    1970:	af ab       	std	Y+55, r26	; 0x37
    1972:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6d a9       	ldd	r22, Y+53	; 0x35
    1976:	7e a9       	ldd	r23, Y+54	; 0x36
    1978:	8f a9       	ldd	r24, Y+55	; 0x37
    197a:	98 ad       	ldd	r25, Y+56	; 0x38
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	55 e4       	ldi	r21, 0x45	; 69
    1984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	89 ab       	std	Y+49, r24	; 0x31
    198e:	9a ab       	std	Y+50, r25	; 0x32
    1990:	ab ab       	std	Y+51, r26	; 0x33
    1992:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1994:	69 a9       	ldd	r22, Y+49	; 0x31
    1996:	7a a9       	ldd	r23, Y+50	; 0x32
    1998:	8b a9       	ldd	r24, Y+51	; 0x33
    199a:	9c a9       	ldd	r25, Y+52	; 0x34
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <HLCD_voidInit+0x17c>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	98 ab       	std	Y+48, r25	; 0x30
    19b2:	8f a7       	std	Y+47, r24	; 0x2f
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    19b6:	69 a9       	ldd	r22, Y+49	; 0x31
    19b8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ba:	8b a9       	ldd	r24, Y+51	; 0x33
    19bc:	9c a9       	ldd	r25, Y+52	; 0x34
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6d a9       	ldd	r22, Y+53	; 0x35
    19d0:	7e a9       	ldd	r23, Y+54	; 0x36
    19d2:	8f a9       	ldd	r24, Y+55	; 0x37
    19d4:	98 ad       	ldd	r25, Y+56	; 0x38
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	98 ab       	std	Y+48, r25	; 0x30
    19f4:	8f a7       	std	Y+47, r24	; 0x2f
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <HLCD_voidInit+0x1dc>
    19f8:	80 e9       	ldi	r24, 0x90	; 144
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	9e a7       	std	Y+46, r25	; 0x2e
    19fe:	8d a7       	std	Y+45, r24	; 0x2d
    1a00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <HLCD_voidInit+0x1ca>
    1a08:	9e a7       	std	Y+46, r25	; 0x2e
    1a0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	98 ab       	std	Y+48, r25	; 0x30
    1a14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a18:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <HLCD_voidInit+0x1be>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	69 a9       	ldd	r22, Y+49	; 0x31
    1a22:	7a a9       	ldd	r23, Y+50	; 0x32
    1a24:	8b a9       	ldd	r24, Y+51	; 0x33
    1a26:	9c a9       	ldd	r25, Y+52	; 0x34
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
    1a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a36:	98 a9       	ldd	r25, Y+48	; 0x30
    1a38:	9c a7       	std	Y+44, r25	; 0x2c
    1a3a:	8b a7       	std	Y+43, r24	; 0x2b
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <HLCD_voidInit+0x206>
    1a44:	9c a7       	std	Y+44, r25	; 0x2c
    1a46:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	/*Display ON/OFF control*/
	Private_voidSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1a48:	8c e0       	ldi	r24, 0x0C	; 12
    1a4a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 ef       	ldi	r26, 0xF0	; 240
    1a54:	b1 e4       	ldi	r27, 0x41	; 65
    1a56:	8f a3       	std	Y+39, r24	; 0x27
    1a58:	98 a7       	std	Y+40, r25	; 0x28
    1a5a:	a9 a7       	std	Y+41, r26	; 0x29
    1a5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a60:	78 a5       	ldd	r23, Y+40	; 0x28
    1a62:	89 a5       	ldd	r24, Y+41	; 0x29
    1a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	55 e4       	ldi	r21, 0x45	; 69
    1a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8b a3       	std	Y+35, r24	; 0x23
    1a78:	9c a3       	std	Y+36, r25	; 0x24
    1a7a:	ad a3       	std	Y+37, r26	; 0x25
    1a7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a80:	7c a1       	ldd	r23, Y+36	; 0x24
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	9e a1       	ldd	r25, Y+38	; 0x26
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <HLCD_voidInit+0x266>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9a a3       	std	Y+34, r25	; 0x22
    1a9c:	89 a3       	std	Y+33, r24	; 0x21
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aba:	78 a5       	ldd	r23, Y+40	; 0x28
    1abc:	89 a5       	ldd	r24, Y+41	; 0x29
    1abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <HLCD_voidInit+0x2c6>
    1ae2:	80 e9       	ldi	r24, 0x90	; 144
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	98 a3       	std	Y+32, r25	; 0x20
    1ae8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aec:	98 a1       	ldd	r25, Y+32	; 0x20
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <HLCD_voidInit+0x2b4>
    1af2:	98 a3       	std	Y+32, r25	; 0x20
    1af4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	89 a1       	ldd	r24, Y+33	; 0x21
    1af8:	9a a1       	ldd	r25, Y+34	; 0x22
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <HLCD_voidInit+0x2a8>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b20:	9a a1       	ldd	r25, Y+34	; 0x22
    1b22:	9e 8f       	std	Y+30, r25	; 0x1e
    1b24:	8d 8f       	std	Y+29, r24	; 0x1d
    1b26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <HLCD_voidInit+0x2f0>
    1b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);
	/*Clear Display*/
	Private_voidSendInstruction(LCD_u8_CLR_DISPLAY);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 ef       	ldi	r26, 0xF0	; 240
    1b3e:	b1 e4       	ldi	r27, 0x41	; 65
    1b40:	89 8f       	std	Y+25, r24	; 0x19
    1b42:	9a 8f       	std	Y+26, r25	; 0x1a
    1b44:	ab 8f       	std	Y+27, r26	; 0x1b
    1b46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a e7       	ldi	r20, 0x7A	; 122
    1b56:	55 e4       	ldi	r21, 0x45	; 69
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8d 8b       	std	Y+21, r24	; 0x15
    1b62:	9e 8b       	std	Y+22, r25	; 0x16
    1b64:	af 8b       	std	Y+23, r26	; 0x17
    1b66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <HLCD_voidInit+0x350>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c 8b       	std	Y+20, r25	; 0x14
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9c 8b       	std	Y+20, r25	; 0x14
    1bc8:	8b 8b       	std	Y+19, r24	; 0x13
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <HLCD_voidInit+0x3b0>
    1bcc:	80 e9       	ldi	r24, 0x90	; 144
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	9a 8b       	std	Y+18, r25	; 0x12
    1bd2:	89 8b       	std	Y+17, r24	; 0x11
    1bd4:	89 89       	ldd	r24, Y+17	; 0x11
    1bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <HLCD_voidInit+0x39e>
    1bdc:	9a 8b       	std	Y+18, r25	; 0x12
    1bde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8b 89       	ldd	r24, Y+19	; 0x13
    1be2:	9c 89       	ldd	r25, Y+20	; 0x14
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9c 8b       	std	Y+20, r25	; 0x14
    1be8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8b 89       	ldd	r24, Y+19	; 0x13
    1bec:	9c 89       	ldd	r25, Y+20	; 0x14
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <HLCD_voidInit+0x392>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	98 8b       	std	Y+16, r25	; 0x10
    1c0e:	8f 87       	std	Y+15, r24	; 0x0f
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	98 89       	ldd	r25, Y+16	; 0x10
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <HLCD_voidInit+0x3da>
    1c18:	98 8b       	std	Y+16, r25	; 0x10
    1c1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	/*Entry Mode Set*/
	Private_voidSendInstruction(LCD_u8_ENTRY_MODE);
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 ef       	ldi	r26, 0xF0	; 240
    1c28:	b1 e4       	ldi	r27, 0x41	; 65
    1c2a:	8b 87       	std	Y+11, r24	; 0x0b
    1c2c:	9c 87       	std	Y+12, r25	; 0x0c
    1c2e:	ad 87       	std	Y+13, r26	; 0x0d
    1c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a e7       	ldi	r20, 0x7A	; 122
    1c40:	55 e4       	ldi	r21, 0x45	; 69
    1c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8f 83       	std	Y+7, r24	; 0x07
    1c4c:	98 87       	std	Y+8, r25	; 0x08
    1c4e:	a9 87       	std	Y+9, r26	; 0x09
    1c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <HLCD_voidInit+0x43a>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <HLCD_voidInit+0x49a>
    1cb6:	80 e9       	ldi	r24, 0x90	; 144
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <HLCD_voidInit+0x488>
    1cc6:	9c 83       	std	Y+4, r25	; 0x04
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <HLCD_voidInit+0x47c>
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <HLCD_voidInit+0x4c4>
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
}
    1d06:	ca 5b       	subi	r28, 0xBA	; 186
    1d08:	df 4f       	sbci	r29, 0xFF	; 255
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret

00001d1e <HLCD_voidSendData>:

/*LCD Send Data*/
void HLCD_voidSendData(u8 copy_u8Char) /* 'A' */
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	2f 97       	sbiw	r28, 0x0f	; 15
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
		/*Data --> RS = 1, Writer --> RW = 0*/
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	62 e0       	ldi	r22, 0x02	; 2
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
		/*Instruction --> Data_Port*/
		MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Char);
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d4c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <MDIO_voidSetPortValue>
		/*Enable --> Falling Edge (1 then 0)*/
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e0       	ldi	r26, 0x00	; 0
    1d60:	b0 e4       	ldi	r27, 0x40	; 64
    1d62:	8b 87       	std	Y+11, r24	; 0x0b
    1d64:	9c 87       	std	Y+12, r25	; 0x0c
    1d66:	ad 87       	std	Y+13, r26	; 0x0d
    1d68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a e7       	ldi	r20, 0x7A	; 122
    1d78:	55 e4       	ldi	r21, 0x45	; 69
    1d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8f 83       	std	Y+7, r24	; 0x07
    1d84:	98 87       	std	Y+8, r25	; 0x08
    1d86:	a9 87       	std	Y+9, r26	; 0x09
    1d88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8c:	78 85       	ldd	r23, Y+8	; 0x08
    1d8e:	89 85       	ldd	r24, Y+9	; 0x09
    1d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	2c f4       	brge	.+10     	; 0x1dac <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	3f c0       	rjmp	.+126    	; 0x1e2a <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	4c f5       	brge	.+82     	; 0x1e16 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <HLCD_voidSendData+0xee>
    1dee:	80 e9       	ldi	r24, 0x90	; 144
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <HLCD_voidSendData+0xdc>
    1dfe:	9c 83       	std	Y+4, r25	; 0x04
    1e00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <HLCD_voidSendData+0xd0>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <HLCD_voidSendData+0x118>
    1e3a:	9a 83       	std	Y+2, r25	; 0x02
    1e3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 85 08 	call	0x110a	; 0x110a <MDIO_voidSetPinValue>
}
    1e48:	2f 96       	adiw	r28, 0x0f	; 15
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <HLCD_voidSendString>:

void HLCD_voidSendString (char *copy_ptrString)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <HLCD_voidSendString+0x6>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	0b c0       	rjmp	.+22     	; 0x1e80 <HLCD_voidSendString+0x26>
	while (*copy_ptrString > 0) //Termination condition
	{
		HLCD_voidSendData(*copy_ptrString++); //Send char then move pointer to next char
    1e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6e:	20 81       	ld	r18, Z
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	82 2f       	mov	r24, r18
    1e7c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <HLCD_voidSendData>
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
}

void HLCD_voidSendString (char *copy_ptrString)
{
	while (*copy_ptrString > 0) //Termination condition
    1e80:	e9 81       	ldd	r30, Y+1	; 0x01
    1e82:	fa 81       	ldd	r31, Y+2	; 0x02
    1e84:	80 81       	ld	r24, Z
    1e86:	88 23       	and	r24, r24
    1e88:	81 f7       	brne	.-32     	; 0x1e6a <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*copy_ptrString++); //Send char then move pointer to next char
	}
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <HLCD_voidGoToPos>:

void HLCD_voidGoToPos (u8 copy_u8RowNum, u8 copy_u8ColumnNum)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <HLCD_voidGoToPos+0x6>
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8RowNum >= LCD_u8_Row1) && (copy_u8RowNum <= LCD_u8_Row2) &&
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	88 23       	and	r24, r24
    1ea6:	c1 f0       	breq	.+48     	; 0x1ed8 <HLCD_voidGoToPos+0x44>
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	a8 f4       	brcc	.+42     	; 0x1ed8 <HLCD_voidGoToPos+0x44>
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	88 23       	and	r24, r24
    1eb2:	91 f0       	breq	.+36     	; 0x1ed8 <HLCD_voidGoToPos+0x44>
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	81 31       	cpi	r24, 0x11	; 17
    1eb8:	78 f4       	brcc	.+30     	; 0x1ed8 <HLCD_voidGoToPos+0x44>
		(copy_u8ColumnNum >= LCD_u8_Column1) && (copy_u8ColumnNum <= LCD_u8_Column16))
	{
		Private_voidSendInstruction(LCD_u8_POSITION);
    1eba:	80 e8       	ldi	r24, 0x80	; 128
    1ebc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
		if (copy_u8RowNum==1)
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	29 f4       	brne	.+10     	; 0x1ed0 <HLCD_voidGoToPos+0x3c>
		{
			Private_voidSendInstruction(LCD_u8_ROW1Address + copy_u8ColumnNum);
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	81 58       	subi	r24, 0x81	; 129
    1eca:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <HLCD_voidGoToPos+0x44>
		}
		else
		{
			Private_voidSendInstruction(LCD_u8_ROW2Address + copy_u8ColumnNum);
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	81 54       	subi	r24, 0x41	; 65
    1ed4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
		}
	}

}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <HLCD_voidDisplayClear>:

void HLCD_voidDisplayClear (void)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
	Private_voidSendInstruction(LCD_u8_CLR_DISPLAY);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Private_voidSendInstruction>
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <Private_map>:

#include "../../MCAL/ADC/ADC_Interface.h"
#include "../../MCAL/ADC/ADC_Private.h"


long Private_map(long x, long in_min, long in_max, long out_min, long out_max) {
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	60 97       	sbiw	r28, 0x10	; 16
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	69 83       	std	Y+1, r22	; 0x01
    1f1c:	7a 83       	std	Y+2, r23	; 0x02
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	2d 83       	std	Y+5, r18	; 0x05
    1f24:	3e 83       	std	Y+6, r19	; 0x06
    1f26:	4f 83       	std	Y+7, r20	; 0x07
    1f28:	58 87       	std	Y+8, r21	; 0x08
    1f2a:	e9 86       	std	Y+9, r14	; 0x09
    1f2c:	fa 86       	std	Y+10, r15	; 0x0a
    1f2e:	0b 87       	std	Y+11, r16	; 0x0b
    1f30:	1c 87       	std	Y+12, r17	; 0x0c
    1f32:	ad 86       	std	Y+13, r10	; 0x0d
    1f34:	be 86       	std	Y+14, r11	; 0x0e
    1f36:	cf 86       	std	Y+15, r12	; 0x0f
    1f38:	d8 8a       	std	Y+16, r13	; 0x10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1f3a:	29 81       	ldd	r18, Y+1	; 0x01
    1f3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1f40:	5c 81       	ldd	r21, Y+4	; 0x04
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	af 81       	ldd	r26, Y+7	; 0x07
    1f48:	b8 85       	ldd	r27, Y+8	; 0x08
    1f4a:	79 01       	movw	r14, r18
    1f4c:	8a 01       	movw	r16, r20
    1f4e:	e8 1a       	sub	r14, r24
    1f50:	f9 0a       	sbc	r15, r25
    1f52:	0a 0b       	sbc	r16, r26
    1f54:	1b 0b       	sbc	r17, r27
    1f56:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1f58:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1f5a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f5c:	58 a1       	ldd	r21, Y+32	; 0x20
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	af 85       	ldd	r26, Y+15	; 0x0f
    1f64:	b8 89       	ldd	r27, Y+16	; 0x10
    1f66:	28 1b       	sub	r18, r24
    1f68:	39 0b       	sbc	r19, r25
    1f6a:	4a 0b       	sbc	r20, r26
    1f6c:	5b 0b       	sbc	r21, r27
    1f6e:	c8 01       	movw	r24, r16
    1f70:	b7 01       	movw	r22, r14
    1f72:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__mulsi3>
    1f76:	7b 01       	movw	r14, r22
    1f78:	8c 01       	movw	r16, r24
    1f7a:	29 85       	ldd	r18, Y+9	; 0x09
    1f7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f7e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f80:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	af 81       	ldd	r26, Y+7	; 0x07
    1f88:	b8 85       	ldd	r27, Y+8	; 0x08
    1f8a:	28 1b       	sub	r18, r24
    1f8c:	39 0b       	sbc	r19, r25
    1f8e:	4a 0b       	sbc	r20, r26
    1f90:	5b 0b       	sbc	r21, r27
    1f92:	c8 01       	movw	r24, r16
    1f94:	b7 01       	movw	r22, r14
    1f96:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__divmodsi4>
    1f9a:	da 01       	movw	r26, r20
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	ad 01       	movw	r20, r26
    1fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa6:	af 85       	ldd	r26, Y+15	; 0x0f
    1fa8:	b8 89       	ldd	r27, Y+16	; 0x10
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
    1fae:	a4 1f       	adc	r26, r20
    1fb0:	b5 1f       	adc	r27, r21
}
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	60 96       	adiw	r28, 0x10	; 16
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	ff 90       	pop	r15
    1fcc:	ef 90       	pop	r14
    1fce:	df 90       	pop	r13
    1fd0:	cf 90       	pop	r12
    1fd2:	bf 90       	pop	r11
    1fd4:	af 90       	pop	r10
    1fd6:	08 95       	ret

00001fd8 <HFLEX_voidInit>:

void HFLEX_voidInit(){
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR1_PIN,DIO_u8_INPUT);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 67 07 	call	0xece	; 0xece <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR2_PIN,DIO_u8_INPUT);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 67 07 	call	0xece	; 0xece <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR3_PIN,DIO_u8_INPUT);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 67 07 	call	0xece	; 0xece <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR4_PIN,DIO_u8_INPUT);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	63 e0       	ldi	r22, 0x03	; 3
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 67 07 	call	0xece	; 0xece <MDIO_voidSetPinDirection>
     MDIO_voidSetPinDirection(FLEX_SENSOR_PORT,FLEX_SENSOR5_PIN,DIO_u8_INPUT);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	64 e0       	ldi	r22, 0x04	; 4
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 67 07 	call	0xece	; 0xece <MDIO_voidSetPinDirection>
}
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <HFLEX_u8Getangle>:

u8 HFLEX_u8Getangle(u8 copy_FLEX_SENSOR_PIN){
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <HFLEX_u8Getangle+0x16>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <HFLEX_u8Getangle+0x18>
    2030:	00 d0       	rcall	.+0      	; 0x2032 <HFLEX_u8Getangle+0x1a>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	8e 83       	std	Y+6, r24	; 0x06

u8 flexADC=ADC_u8GetDigitalValue(copy_FLEX_SENSOR_PIN);
    2038:	8e 81       	ldd	r24, Y+6	; 0x06
    203a:	0e 94 32 0b 	call	0x1664	; 0x1664 <ADC_u8GetDigitalValue>
    203e:	8d 83       	std	Y+5, r24	; 0x05

f32 flexR = R_DIV * (VCC /( (flexADC) * VCC / 1023.0) - 1.0);
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	aa 27       	eor	r26, r26
    2048:	97 fd       	sbrc	r25, 7
    204a:	a0 95       	com	r26
    204c:	ba 2f       	mov	r27, r26
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	29 e2       	ldi	r18, 0x29	; 41
    2060:	3c e5       	ldi	r19, 0x5C	; 92
    2062:	4f e9       	ldi	r20, 0x9F	; 159
    2064:	50 e4       	ldi	r21, 0x40	; 64
    2066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 ec       	ldi	r19, 0xC0	; 192
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9c 01       	movw	r18, r24
    2084:	ad 01       	movw	r20, r26
    2086:	69 e2       	ldi	r22, 0x29	; 41
    2088:	7c e5       	ldi	r23, 0x5C	; 92
    208a:	8f e9       	ldi	r24, 0x9F	; 159
    208c:	90 e4       	ldi	r25, 0x40	; 64
    208e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	38 ed       	ldi	r19, 0xD8	; 216
    20b2:	46 ed       	ldi	r20, 0xD6	; 214
    20b4:	56 e4       	ldi	r21, 0x46	; 70
    20b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	ab 83       	std	Y+3, r26	; 0x03
    20c4:	bc 83       	std	Y+4, r27	; 0x04

return Private_map(flexR, STRAIGHT_RESISTANCE, BEND_RESISTANCE,0, 90.0);
    20c6:	69 81       	ldd	r22, Y+1	; 0x01
    20c8:	7a 81       	ldd	r23, Y+2	; 0x02
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    20d2:	9b 01       	movw	r18, r22
    20d4:	ac 01       	movw	r20, r24
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <HFLEX_u8Getangle+0xc0>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <HFLEX_u8Getangle+0xc2>
    20da:	ed b7       	in	r30, 0x3d	; 61
    20dc:	fe b7       	in	r31, 0x3e	; 62
    20de:	31 96       	adiw	r30, 0x01	; 1
    20e0:	8a e5       	ldi	r24, 0x5A	; 90
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e0       	ldi	r26, 0x00	; 0
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	80 83       	st	Z, r24
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	a2 83       	std	Z+2, r26	; 0x02
    20ee:	b3 83       	std	Z+3, r27	; 0x03
    20f0:	ca 01       	movw	r24, r20
    20f2:	b9 01       	movw	r22, r18
    20f4:	24 eb       	ldi	r18, 0xB4	; 180
    20f6:	31 e9       	ldi	r19, 0x91	; 145
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	0f 2e       	mov	r0, r31
    20fe:	f0 e1       	ldi	r31, 0x10	; 16
    2100:	ef 2e       	mov	r14, r31
    2102:	f1 e2       	ldi	r31, 0x21	; 33
    2104:	ff 2e       	mov	r15, r31
    2106:	f1 e0       	ldi	r31, 0x01	; 1
    2108:	0f 2f       	mov	r16, r31
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	1f 2f       	mov	r17, r31
    210e:	f0 2d       	mov	r31, r0
    2110:	aa 24       	eor	r10, r10
    2112:	bb 24       	eor	r11, r11
    2114:	65 01       	movw	r12, r10
    2116:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <Private_map>
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    
}
    2126:	26 96       	adiw	r28, 0x06	; 6
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	df 90       	pop	r13
    2140:	cf 90       	pop	r12
    2142:	bf 90       	pop	r11
    2144:	af 90       	pop	r10
    2146:	08 95       	ret

00002148 <main>:
#include "LIB/MCAL/DIO/DIO_Interface.h"
#include "LIB/MCAL/UART/UART_Interface.h"
#include "LIB/HAL/FlexSensor/FLEX_Interface.h"


void main(){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <main+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <main+0x8>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62

	HFLEX_voidInit();
    2156:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <HFLEX_voidInit>
	ADC_voidInit();
    215a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <ADC_voidInit>
	UART_Init();
    215e:	0e 94 f4 06 	call	0xde8	; 0xde8 <UART_Init>
	while(1)
	{

		u8 u8_Finger1=HFLEX_u8Getangle(ADC_u8_CHANNEL_0);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 0c 10 	call	0x2018	; 0x2018 <HFLEX_u8Getangle>
    2168:	8d 83       	std	Y+5, r24	; 0x05
		u8 u8_Finger2=HFLEX_u8Getangle(ADC_u8_CHANNEL_1);
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	0e 94 0c 10 	call	0x2018	; 0x2018 <HFLEX_u8Getangle>
    2170:	8c 83       	std	Y+4, r24	; 0x04
		u8 u8_Finger3=HFLEX_u8Getangle(ADC_u8_CHANNEL_2);
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	0e 94 0c 10 	call	0x2018	; 0x2018 <HFLEX_u8Getangle>
    2178:	8b 83       	std	Y+3, r24	; 0x03
		u8 u8_Finger4=HFLEX_u8Getangle(ADC_u8_CHANNEL_3);
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	0e 94 0c 10 	call	0x2018	; 0x2018 <HFLEX_u8Getangle>
    2180:	8a 83       	std	Y+2, r24	; 0x02
		u8 u8_Finger5=HFLEX_u8Getangle(ADC_u8_CHANNEL_4);
    2182:	84 e0       	ldi	r24, 0x04	; 4
    2184:	0e 94 0c 10 	call	0x2018	; 0x2018 <HFLEX_u8Getangle>
    2188:	89 83       	std	Y+1, r24	; 0x01

		if(u8_Finger1>=60){
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	8c 33       	cpi	r24, 0x3C	; 60
    218e:	18 f0       	brcs	.+6      	; 0x2196 <main+0x4e>
			UART_TransmitData('f');
    2190:	86 e6       	ldi	r24, 0x66	; 102
    2192:	0e 94 0d 07 	call	0xe1a	; 0xe1a <UART_TransmitData>
		}

		if(u8_Finger1<=15){
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	80 31       	cpi	r24, 0x10	; 16
    219a:	18 f7       	brcc	.-58     	; 0x2162 <main+0x1a>
					UART_TransmitData('s');
    219c:	83 e7       	ldi	r24, 0x73	; 115
    219e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <UART_TransmitData>
    21a2:	df cf       	rjmp	.-66     	; 0x2162 <main+0x1a>

000021a4 <__mulsi3>:
    21a4:	62 9f       	mul	r22, r18
    21a6:	d0 01       	movw	r26, r0
    21a8:	73 9f       	mul	r23, r19
    21aa:	f0 01       	movw	r30, r0
    21ac:	82 9f       	mul	r24, r18
    21ae:	e0 0d       	add	r30, r0
    21b0:	f1 1d       	adc	r31, r1
    21b2:	64 9f       	mul	r22, r20
    21b4:	e0 0d       	add	r30, r0
    21b6:	f1 1d       	adc	r31, r1
    21b8:	92 9f       	mul	r25, r18
    21ba:	f0 0d       	add	r31, r0
    21bc:	83 9f       	mul	r24, r19
    21be:	f0 0d       	add	r31, r0
    21c0:	74 9f       	mul	r23, r20
    21c2:	f0 0d       	add	r31, r0
    21c4:	65 9f       	mul	r22, r21
    21c6:	f0 0d       	add	r31, r0
    21c8:	99 27       	eor	r25, r25
    21ca:	72 9f       	mul	r23, r18
    21cc:	b0 0d       	add	r27, r0
    21ce:	e1 1d       	adc	r30, r1
    21d0:	f9 1f       	adc	r31, r25
    21d2:	63 9f       	mul	r22, r19
    21d4:	b0 0d       	add	r27, r0
    21d6:	e1 1d       	adc	r30, r1
    21d8:	f9 1f       	adc	r31, r25
    21da:	bd 01       	movw	r22, r26
    21dc:	cf 01       	movw	r24, r30
    21de:	11 24       	eor	r1, r1
    21e0:	08 95       	ret

000021e2 <__divmodsi4>:
    21e2:	97 fb       	bst	r25, 7
    21e4:	09 2e       	mov	r0, r25
    21e6:	05 26       	eor	r0, r21
    21e8:	0e d0       	rcall	.+28     	; 0x2206 <__divmodsi4_neg1>
    21ea:	57 fd       	sbrc	r21, 7
    21ec:	04 d0       	rcall	.+8      	; 0x21f6 <__divmodsi4_neg2>
    21ee:	14 d0       	rcall	.+40     	; 0x2218 <__udivmodsi4>
    21f0:	0a d0       	rcall	.+20     	; 0x2206 <__divmodsi4_neg1>
    21f2:	00 1c       	adc	r0, r0
    21f4:	38 f4       	brcc	.+14     	; 0x2204 <__divmodsi4_exit>

000021f6 <__divmodsi4_neg2>:
    21f6:	50 95       	com	r21
    21f8:	40 95       	com	r20
    21fa:	30 95       	com	r19
    21fc:	21 95       	neg	r18
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	4f 4f       	sbci	r20, 0xFF	; 255
    2202:	5f 4f       	sbci	r21, 0xFF	; 255

00002204 <__divmodsi4_exit>:
    2204:	08 95       	ret

00002206 <__divmodsi4_neg1>:
    2206:	f6 f7       	brtc	.-4      	; 0x2204 <__divmodsi4_exit>
    2208:	90 95       	com	r25
    220a:	80 95       	com	r24
    220c:	70 95       	com	r23
    220e:	61 95       	neg	r22
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	8f 4f       	sbci	r24, 0xFF	; 255
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	08 95       	ret

00002218 <__udivmodsi4>:
    2218:	a1 e2       	ldi	r26, 0x21	; 33
    221a:	1a 2e       	mov	r1, r26
    221c:	aa 1b       	sub	r26, r26
    221e:	bb 1b       	sub	r27, r27
    2220:	fd 01       	movw	r30, r26
    2222:	0d c0       	rjmp	.+26     	; 0x223e <__udivmodsi4_ep>

00002224 <__udivmodsi4_loop>:
    2224:	aa 1f       	adc	r26, r26
    2226:	bb 1f       	adc	r27, r27
    2228:	ee 1f       	adc	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	a2 17       	cp	r26, r18
    222e:	b3 07       	cpc	r27, r19
    2230:	e4 07       	cpc	r30, r20
    2232:	f5 07       	cpc	r31, r21
    2234:	20 f0       	brcs	.+8      	; 0x223e <__udivmodsi4_ep>
    2236:	a2 1b       	sub	r26, r18
    2238:	b3 0b       	sbc	r27, r19
    223a:	e4 0b       	sbc	r30, r20
    223c:	f5 0b       	sbc	r31, r21

0000223e <__udivmodsi4_ep>:
    223e:	66 1f       	adc	r22, r22
    2240:	77 1f       	adc	r23, r23
    2242:	88 1f       	adc	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	1a 94       	dec	r1
    2248:	69 f7       	brne	.-38     	; 0x2224 <__udivmodsi4_loop>
    224a:	60 95       	com	r22
    224c:	70 95       	com	r23
    224e:	80 95       	com	r24
    2250:	90 95       	com	r25
    2252:	9b 01       	movw	r18, r22
    2254:	ac 01       	movw	r20, r24
    2256:	bd 01       	movw	r22, r26
    2258:	cf 01       	movw	r24, r30
    225a:	08 95       	ret

0000225c <__prologue_saves__>:
    225c:	2f 92       	push	r2
    225e:	3f 92       	push	r3
    2260:	4f 92       	push	r4
    2262:	5f 92       	push	r5
    2264:	6f 92       	push	r6
    2266:	7f 92       	push	r7
    2268:	8f 92       	push	r8
    226a:	9f 92       	push	r9
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	ca 1b       	sub	r28, r26
    2286:	db 0b       	sbc	r29, r27
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	09 94       	ijmp

00002294 <__epilogue_restores__>:
    2294:	2a 88       	ldd	r2, Y+18	; 0x12
    2296:	39 88       	ldd	r3, Y+17	; 0x11
    2298:	48 88       	ldd	r4, Y+16	; 0x10
    229a:	5f 84       	ldd	r5, Y+15	; 0x0f
    229c:	6e 84       	ldd	r6, Y+14	; 0x0e
    229e:	7d 84       	ldd	r7, Y+13	; 0x0d
    22a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22a6:	b9 84       	ldd	r11, Y+9	; 0x09
    22a8:	c8 84       	ldd	r12, Y+8	; 0x08
    22aa:	df 80       	ldd	r13, Y+7	; 0x07
    22ac:	ee 80       	ldd	r14, Y+6	; 0x06
    22ae:	fd 80       	ldd	r15, Y+5	; 0x05
    22b0:	0c 81       	ldd	r16, Y+4	; 0x04
    22b2:	1b 81       	ldd	r17, Y+3	; 0x03
    22b4:	aa 81       	ldd	r26, Y+2	; 0x02
    22b6:	b9 81       	ldd	r27, Y+1	; 0x01
    22b8:	ce 0f       	add	r28, r30
    22ba:	d1 1d       	adc	r29, r1
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	ed 01       	movw	r28, r26
    22c8:	08 95       	ret

000022ca <_exit>:
    22ca:	f8 94       	cli

000022cc <__stop_program>:
    22cc:	ff cf       	rjmp	.-2      	; 0x22cc <__stop_program>
